import React, { useState, useRef, useCallback } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Slider } from "@/components/ui/slider";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  Stethoscope, 
  Thermometer, 
  Eye, 
  Heart, 
  HeartPulse, 
  Pill,
  Copy,
  Trash2,
  CheckCircle,
  RotateCcw,
  Brain,
  Bone,
  Shield,
  Activity,
  ChevronDown,
  ChevronUp,
  ChevronLeft,
  ChevronRight,
  ClipboardList,
  Search,
  FileText,
  TrendingUp,
  Users,
  TestTube,
  Beaker,
  Zap,
  Languages,
  X,
  Camera,
  Plus
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { useLanguage } from "@/contexts/LanguageContext";
import { MedicationSection } from "@/components/MedicationSection";
import { ChiefComplaintSection, type ChiefComplaintData } from "@/components/ChiefComplaintSection";
import { type MedicationData, formatMedicationsForNote } from "@/lib/medicationUtils";
import { LabImageUpload } from "@/components/LabImageUpload";
import { TemplateSelector } from "@/components/TemplateSelector";
import { type Template } from "@shared/schema";
import { type TemplateContent, getSectionById } from "@/lib/sectionLibrary";

// Allergies and Social History data structures
interface AllergiesData {
  hasAllergies: boolean;
  allergiesList: string[];
}

interface SocialHistoryData {
  smoking: {
    status: boolean;
    details: string; // cigarettes per day or pack years
  };
  alcohol: {
    status: boolean;
    details: string; // number of consumptions
  };
  drugs: {
    status: boolean;
    details: string; // drugs used
  };
}

const labCategories = {
  "CBC": {
    icon: TestTube,
    color: "bg-red-600",
    tests: {
      "WBC": { name: "White Blood Cells", range: "4.0-11.0", unit: "×10⁹/L" },
      "RBC": { name: "Red Blood Cells", range: "4.2-5.4 (M), 3.6-5.0 (F)", unit: "×10¹²/L" },
      "Hemoglobin": { name: "Hemoglobin", range: "140-180 (M), 120-160 (F)", unit: "g/L" },
      "Hematocrit": { name: "Hematocrit", range: "0.42-0.52 (M), 0.37-0.47 (F)", unit: "L/L" },
      "Platelets": { name: "Platelets", range: "150-450", unit: "×10⁹/L" }
    }
  },
  "BMP": {
    icon: Beaker,
    color: "bg-blue-600",
    tests: {
      "Sodium": { name: "Sodium", range: "136-145", unit: "mmol/L" },
      "Potassium": { name: "Potassium", range: "3.5-5.0", unit: "mmol/L" },
      "Chloride": { name: "Chloride", range: "98-107", unit: "mmol/L" },
      "CO2": { name: "CO2", range: "22-29", unit: "mmol/L" },
      "Urea": { name: "Urea", range: "2.5-7.1", unit: "mmol/L" },
      "Creatinine": { name: "Creatinine", range: "62-115 (M), 53-97 (F)", unit: "μmol/L" },
      "Glucose": { name: "Glucose", range: "3.9-5.6", unit: "mmol/L" }
    }
  },
  "LFTs": {
    icon: Activity,
    color: "bg-green-600",
    tests: {
      "ALT": { name: "ALT", range: "7-56", unit: "U/L" },
      "AST": { name: "AST", range: "10-40", unit: "U/L" },
      "ALP": { name: "Alkaline Phosphatase", range: "44-147", unit: "U/L" },
      "Total_Bilirubin": { name: "Total Bilirubin", range: "5-21", unit: "μmol/L" },
      "Albumin": { name: "Albumin", range: "35-50", unit: "g/L" }
    }
  },
  "Coagulation": {
    icon: Heart,
    color: "bg-purple-600",
    tests: {
      "PT": { name: "Prothrombin Time", range: "11-13", unit: "seconds" },
      "INR": { name: "INR", range: "0.8-1.1", unit: "" },
      "PTT": { name: "Partial Thromboplastin Time", range: "25-35", unit: "seconds" }
    }
  },
  "Cardiac": {
    icon: HeartPulse,
    color: "bg-red-500",
    tests: {
      "Troponin": { name: "Troponin I", range: "<40", unit: "ng/L" },
      "CK_MB": { name: "CK-MB", range: "0-6.3", unit: "μg/L" },
      "BNP": { name: "BNP", range: "<100", unit: "ng/L" }
    }
  },
  "Inflammatory": {
    icon: Shield,
    color: "bg-orange-600",
    tests: {
      "ESR": { name: "ESR", range: "0-22 (M), 0-29 (F)", unit: "mm/hr" },
      "CRP": { name: "C-Reactive Protein", range: "<3.0", unit: "mg/L" },
      "Procalcitonin": { name: "Procalcitonin", range: "<0.25", unit: "μg/L" }
    }
  },
  "Blood Gases": {
    icon: Zap,
    color: "bg-sky-600",
    tests: {
      "pH": { name: "pH", range: "7.35-7.45", unit: "" },
      "pCO2": { name: "pCO2", range: "35-45", unit: "mmHg" },
      "pO2": { name: "pO2", range: "80-100", unit: "mmHg" },
      "HCO3": { name: "HCO3", range: "22-26", unit: "mmol/L" },
      "Base_Excess": { name: "Base Excess", range: "-2 to +2", unit: "mmol/L" },
      "O2_Sat": { name: "O2 Saturation", range: "95-100", unit: "%" },
      "Lactate": { name: "Lactate", range: "0.5-2.2", unit: "mmol/L" }
    }
  }
};



const imagingRegions = {
  "CNS": {
    name: "CNS",
    modalities: ["CT", "MRI", "Angiography"],
    color: "bg-pink-600",
    icon: Brain,
    systemMapping: "NEUROLOGICAL"
  },
  "HEENT": {
    name: "HEENT",
    modalities: ["CT", "MRI", "X-Ray"],
    color: "bg-green-600",
    icon: Eye,
    systemMapping: "NEUROLOGICAL"
  },
  "Thyroid": {
    name: "Thyroid",
    modalities: ["Ultrasound", "CT", "Nuclear Medicine"],
    color: "bg-emerald-600",
    icon: Activity,
    systemMapping: "HEMODYNAMIC"
  },
  "Thorax": {
    name: "Thorax",
    modalities: ["X-Ray", "CT", "Angiography", "Ultrasound"],
    color: "bg-cyan-600",
    icon: HeartPulse,
    systemMapping: "RESPIRATORY"
  },
  "Abdomen": {
    name: "Abdomen",
    modalities: ["X-Ray", "CT", "Ultrasound", "MRI"],
    color: "bg-orange-600",
    icon: Pill,
    systemMapping: "GASTROINTESTINAL"
  },
  "GU": {
    name: "Genitourinary",
    modalities: ["Ultrasound", "CT", "MRI", "X-Ray"],
    color: "bg-purple-600",
    icon: Shield,
    systemMapping: "NEPHRO-METABOLIC"
  },
  "Lower_Limbs": {
    name: "Lower Limbs",
    modalities: ["X-Ray", "CT", "MRI", "Ultrasound"],
    color: "bg-indigo-600",
    icon: Bone,
    systemMapping: "HEMATO-INFECTIOUS"
  }
};

const imagingFindings = {
  "CT_CNS": {
    concise: "CT head: no significant findings",
    detailed: "CT head: No signs of acute hemorrhage, mass effect, or midline shift. No evidence of acute infarction.",
    concise_fr: "TDM cérébrale: aucune anomalie significative",
    detailed_fr: "TDM cérébrale: Aucun signe d'hémorragie aiguë, d'effet de masse ou de déviation de la ligne médiane. Aucune évidence d'infarctus aigu."
  },
  "MRI_CNS": {
    concise: "MRI brain: no significant findings",
    detailed: "MRI brain: No signs of acute infarction, hemorrhage, or space-occupying lesion. Normal ventricular size and configuration.",
    concise_fr: "IRM cérébrale: aucune anomalie significative",
    detailed_fr: "IRM cérébrale: Aucun signe d'infarctus aigu, d'hémorragie ou de lésion occupant l'espace. Taille et configuration ventriculaires normales."
  },
  "Angiography_CNS": {
    concise: "Cerebral angiography: no significant findings",
    detailed: "Cerebral angiography: Patent major cerebral vessels. No evidence of stenosis, occlusion, or vascular malformation."
  },
  "CT_HEENT": {
    concise: "CT head and neck: no significant findings",
    detailed: "CT head and neck: No signs of fracture, foreign body, or soft tissue swelling. Normal anatomical structures."
  },
  "MRI_HEENT": {
    concise: "MRI head and neck: no significant findings",
    detailed: "MRI head and neck: No signs of mass lesion, inflammation, or structural abnormality."
  },
  "X-Ray_HEENT": {
    concise: "X-ray head and neck: no significant findings",
    detailed: "X-ray head and neck: No signs of fracture or foreign body. Normal bony alignment."
  },
  "Ultrasound_Thyroid": {
    concise: "Thyroid ultrasound: no significant findings",
    detailed: "Thyroid ultrasound: Normal size and echogenicity. No nodules or cystic lesions identified.",
    concise_fr: "Échographie thyroïdienne: aucune anomalie significative",
    detailed_fr: "Échographie thyroïdienne: Taille et échogénicité normales. Aucun nodule ou lésion kystique identifié."
  },
  "CT_Thyroid": {
    concise: "CT thyroid: no significant findings",
    detailed: "CT thyroid: Normal size and enhancement pattern. No mass lesion or lymphadenopathy.",
    concise_fr: "TDM thyroïde: aucune anomalie significative",
    detailed_fr: "TDM thyroïde: Taille normale et patron de rehaussement normal. Aucune lésion de masse ou lymphadénopathie."
  },
  "Nuclear Medicine_Thyroid": {
    concise: "Thyroid scan: no significant findings",
    detailed: "Thyroid scan: Normal uptake and distribution. No cold or hot nodules identified.",
    concise_fr: "Scintigraphie thyroïdienne: aucune anomalie significative",
    detailed_fr: "Scintigraphie thyroïdienne: Captation et distribution normales. Aucun nodule froid ou chaud identifié."
  },
  "X-Ray_Thorax": {
    concise: "Chest X-ray: no significant findings",
    detailed: "Chest X-ray: No signs of pneumonia, volume overload, or effusion. Normal cardiac silhouette and lung fields.",
    concise_fr: "Radiographie pulmonaire: aucune anomalie significative",
    detailed_fr: "Radiographie pulmonaire: Aucun signe de pneumonie, de surcharge volumique ou d'épanchement. Silhouette cardiaque et champs pulmonaires normaux."
  },
  "CT_Thorax": {
    concise: "CT chest: no significant findings",
    detailed: "CT chest: No signs of pulmonary embolism, pneumonia, or mass lesion. Normal mediastinal structures.",
    concise_fr: "TDM thoracique: aucune anomalie significative",
    detailed_fr: "TDM thoracique: Aucun signe d'embolie pulmonaire, de pneumonie ou de lésion de masse. Structures médiastinales normales."
  },
  "Angiography_Thorax": {
    concise: "CT angiography chest: no significant findings",
    detailed: "CT angiography chest: No signs of pulmonary embolism or aortic pathology. Patent pulmonary arteries.",
    concise_fr: "Angiographie CT thoracique: aucune anomalie significative",
    detailed_fr: "Angiographie CT thoracique: Aucun signe d'embolie pulmonaire ou de pathologie aortique. Artères pulmonaires perméables."
  },
  "Ultrasound_Thorax": {
    concise: "Chest ultrasound: no significant findings",
    detailed: "Chest ultrasound: No signs of pleural effusion or pneumothorax. Normal diaphragmatic movement.",
    concise_fr: "Échographie thoracique: aucune anomalie significative",
    detailed_fr: "Échographie thoracique: Aucun signe d'épanchement pleural ou de pneumothorax. Mouvement diaphragmatique normal."
  },
  "X-Ray_Abdomen": {
    concise: "Abdominal X-ray: no significant findings",
    detailed: "Abdominal X-ray: No signs of bowel obstruction, free air, or foreign body. Normal bowel gas pattern.",
    concise_fr: "Radiographie abdominale: aucune anomalie significative",
    detailed_fr: "Radiographie abdominale: Aucun signe d'obstruction intestinale, d'air libre ou de corps étranger. Gaz intestinal normal."
  },
  "CT_Abdomen": {
    concise: "CT abdomen: no significant findings",
    detailed: "CT abdomen: No signs of obstruction, perforation, or mass lesion. Normal organ enhancement.",
    concise_fr: "TDM abdominale: aucune anomalie significative",
    detailed_fr: "TDM abdominale: Aucun signe d'obstruction, de perforation ou de lésion de masse. Rehaussement organique normal."
  },
  "Ultrasound_Abdomen": {
    concise: "Abdominal ultrasound: no significant findings",
    detailed: "Abdominal ultrasound: No signs of organomegaly, mass lesion, or free fluid.",
    concise_fr: "Échographie abdominale: aucune anomalie significative",
    detailed_fr: "Échographie abdominale: Aucun signe d'organomégalie, de lésion de masse ou de liquide libre."
  },
  "MRI_Abdomen": {
    concise: "MRI abdomen: no significant findings",
    detailed: "MRI abdomen: No signs of mass lesion, inflammation, or vascular abnormality.",
    concise_fr: "IRM abdominale: aucune anomalie significative",
    detailed_fr: "IRM abdominale: Aucun signe de lésion de masse, d'inflammation ou d'anomalie vasculaire."
  },
  "Ultrasound_GU": {
    concise: "GU ultrasound: no significant findings",
    detailed: "GU ultrasound: No signs of hydronephrosis, stones, or mass lesion. Normal bladder wall thickness."
  },
  "CT_GU": {
    concise: "CT urogram: no significant findings",
    detailed: "CT urogram: No signs of stones, obstruction, or mass lesion. Normal renal enhancement and excretion."
  },
  "MRI_GU": {
    concise: "MRI pelvis: no significant findings",
    detailed: "MRI pelvis: No signs of mass lesion, inflammation, or structural abnormality."
  },
  "X-Ray_GU": {
    concise: "KUB X-ray: no significant findings",
    detailed: "KUB X-ray: No signs of stones or foreign body. Normal bony pelvis."
  },
  "X-Ray_Lower_Limbs": {
    concise: "Lower limb X-ray: no significant findings",
    detailed: "Lower limb X-ray: No signs of fracture, dislocation, or bony abnormality. Normal joint spaces."
  },
  "CT_Lower_Limbs": {
    concise: "CT lower limbs: no significant findings",
    detailed: "CT lower limbs: No signs of fracture, mass lesion, or vascular abnormality."
  },
  "MRI_Lower_Limbs": {
    concise: "MRI lower limbs: no significant findings",
    detailed: "MRI lower limbs: No signs of soft tissue injury, mass lesion, or bone marrow abnormality."
  },
  "Ultrasound_Lower_Limbs": {
    concise: "Lower limb ultrasound: no significant findings",
    detailed: "Lower limb ultrasound: No signs of deep vein thrombosis or arterial insufficiency. Normal flow patterns."
  }
};

const intubationParameters = {
  "Mode": { name: "Ventilator Mode", options: ["AC/VC", "SIMV", "PSV", "CPAP", "BiPAP"], unit: "" },
  "TV": { name: "Tidal Volume", range: "200-800", unit: "mL", min: 200, max: 800, step: 10 },
  "RR": { name: "Respiratory Rate", range: "8-35", unit: "/min", min: 8, max: 35, step: 1 },
  "PEEP": { name: "PEEP", range: "0-20", unit: "cmH2O", min: 0, max: 20, step: 1 },
  "FiO2": { name: "FiO2", range: "21-100", unit: "%", min: 21, max: 100, step: 1 },
  "Peak_Pressure": { name: "Peak Pressure", range: "10-50", unit: "cmH2O", min: 10, max: 50, step: 1 },
  "Plateau_Pressure": { name: "Plateau Pressure", range: "10-40", unit: "cmH2O", min: 10, max: 40, step: 1 },
  "Mean_Pressure": { name: "Mean Airway Pressure", range: "5-25", unit: "cmH2O", min: 5, max: 25, step: 1 }
};

const rosOptions = {
  General: {
    detailed: "No fevers, chills, night sweats, or weight loss",
    concise: "No constitutional symptoms"
  },
  HEENT: {
    detailed: "No headaches, visual changes, hearing loss, sore throat, or nasal congestion",
    concise: "No HEENT symptoms"
  },
  Cardiovascular: {
    detailed: "No chest pain, palpitations, shortness of breath, or lower extremity edema",
    concise: "No cardiovascular symptoms"
  },
  Respiratory: {
    detailed: "No cough, shortness of breath, wheezing, or chest tightness",
    concise: "No respiratory symptoms"
  },
  Gastrointestinal: {
    detailed: "No abdominal pain, nausea, vomiting, diarrhea, or constipation",
    concise: "No gastrointestinal symptoms"
  },
  Genitourinary: {
    detailed: "No urinary frequency, urgency, dysuria, or hematuria",
    concise: "No genitourinary symptoms"
  },
  Musculoskeletal: {
    detailed: "No joint pain, muscle aches, back pain, or stiffness",
    concise: "No musculoskeletal symptoms"
  },
  Neurological: {
    detailed: "No headaches, dizziness, weakness, numbness, or changes in coordination",
    concise: "No neurological symptoms"
  },
  Psychiatric: {
    detailed: "No depression, anxiety, mood changes, or sleep disturbances",
    concise: "No psychiatric symptoms"
  },
  Skin: {
    detailed: "No rashes, lesions, itching, or changes in moles",
    concise: "No skin symptoms"
  },
  Endocrine: {
    detailed: "No heat or cold intolerance, excessive thirst, or changes in appetite",
    concise: "No endocrine symptoms"
  },
  Hematologic: {
    detailed: "No easy bruising, bleeding, or swollen lymph nodes",
    concise: "No hematologic symptoms"
  }
};

const physicalExamOptions = {
  General: "Alert, well-appearing, in no acute distress",
  Vital: "Afebrile, normotensive, normal heart rate and respiratory rate",
  HEENT: "NCAT, PERRL, EOMI, no lymphadenopathy, throat clear",
  Cardiovascular: "Regular rate and rhythm, no murmurs, rubs, or gallops",
  Respiratory: "Clear to auscultation bilaterally, no wheezes or rales", 
  Gastrointestinal: "Soft, non-tender, non-distended, normal bowel sounds",
  Genitourinary: "Deferred or normal external genitalia",
  Musculoskeletal: "Normal range of motion, no joint swelling or tenderness",
  Neurological: "Alert and oriented x3, cranial nerves II-XII intact, normal strength and sensation",
  Skin: "Warm, dry, intact, no rashes or lesions",
  Extremities: "No clubbing, cyanosis, or edema"
};

const systemIcons = {
  General: Thermometer,
  HEENT: Eye,
  Cardiovascular: Heart,
  Respiratory: HeartPulse,
  Gastrointestinal: Pill,
  Genitourinary: Shield,
  Musculoskeletal: Bone,
  Neurological: Brain,
  Psychiatric: Activity,
  Skin: CheckCircle,
  Endocrine: Activity,
  Hematologic: Heart,
  Vital: Activity,
  Extremities: Bone
};

const systemColors = {
  General: "bg-blue-600",
  HEENT: "bg-emerald-600", 
  Cardiovascular: "bg-red-600",
  Respiratory: "bg-cyan-600",
  Gastrointestinal: "bg-orange-600",
  Genitourinary: "bg-purple-600",
  Musculoskeletal: "bg-amber-600",
  Neurological: "bg-indigo-600",
  Psychiatric: "bg-pink-600",
  Skin: "bg-teal-600",
  Endocrine: "bg-green-600",
  Hematologic: "bg-rose-600",
  Vital: "bg-slate-600",
  Extremities: "bg-yellow-600"
};

function ReviewOfSystems() {
  const noteTextareaRef = useRef<HTMLTextAreaElement>(null);
  const [selectedRosSystems, setSelectedRosSystems] = useState<Set<string>>(new Set());
  const [selectedPeSystems, setSelectedPeSystems] = useState<Set<string>>(new Set());
  const [selectedLabCategories, setSelectedLabCategories] = useState<Set<string>>(new Set());
  const [labValues, setLabValues] = useState<Record<string, Record<string, { current: string; past: string[] }>>>({});
  const [normalCategories, setNormalCategories] = useState<Set<string>>(new Set());
  const [bloodGasTypes, setBloodGasTypes] = useState<Record<string, string>>({});
  const [customLabs, setCustomLabs] = useState<Record<string, { current: string; past: string[] }>>({});
  const [newCustomLabName, setNewCustomLabName] = useState("");
  const [tempLabData, setTempLabData] = useState({ current: "", past: ["", "", "", ""] });
  const [rosSystemModes, setRosSystemModes] = useState<Record<string, "detailed" | "concise">>({});
  const [intubationValues, setIntubationValues] = useState<Record<string, { current: string; past: string[] }>>({});

  const [selectedImagingRegions, setSelectedImagingRegions] = useState<Set<string>>(new Set());
  const [selectedImagingModalities, setSelectedImagingModalities] = useState<Record<string, string>>({});
  const [imagingResults, setImagingResults] = useState<Record<string, { normal: boolean; customResult: string; mode?: "detailed" | "concise" }>>({});
  const [note, setNote] = useState("");
  const [currentSection, setCurrentSection] = useState(0);
  const [noteType, setNoteType] = useState<"admission" | "progress" | "consultation" | null>(null);
  const [admissionType, setAdmissionType] = useState<"general" | "icu">("general");
  const [progressType, setProgressType] = useState<"general" | "icu">("general");
  
  // Custom text preservation - track if user has manually edited the note
  const [hasUserEditedNote, setHasUserEditedNote] = useState(false);
  const [userNoteContent, setUserNoteContent] = useState("");
  const [medications, setMedications] = useState<MedicationData>({ 
    homeMedications: [], 
    hospitalMedications: [] 
  });
  const [allergies, setAllergies] = useState<AllergiesData>({
    hasAllergies: false,
    allergiesList: []
  });
  const [socialHistory, setSocialHistory] = useState<SocialHistoryData>({
    smoking: { status: false, details: '' },
    alcohol: { status: false, details: '' },
    drugs: { status: false, details: '' }
  });
  const [chiefComplaint, setChiefComplaint] = useState<ChiefComplaintData>({
    selectedTemplate: '',
    customComplaint: '',
    presentingSymptoms: '',
    onsetDuration: '',
    associatedSymptoms: '',
    aggravatingFactors: '',
    relievingFactors: '',
    previousTreatment: ''
  });
  const [allergiesExpanded, setAllergiesExpanded] = useState(false);
  const [newAllergy, setNewAllergy] = useState("");
  
  // Template state
  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);
  const [showTemplateSelector, setShowTemplateSelector] = useState(false);
  
  const { toast } = useToast();
  const { language, setLanguage, t } = useLanguage();

  // Handle note text changes to preserve user edits
  const handleNoteChange = (newText: string) => {
    setNote(newText);
    setHasUserEditedNote(true);
    setUserNoteContent(newText);
  };

  const [sections, setSections] = useState([
    { id: 'noteType', name: 'Note Type' },
    { id: 'allergies', name: 'Allergies' },
    { id: 'medications', name: 'Medications' },
    { id: 'ros', name: 'Review of Systems' },
    { id: 'pe', name: 'Physical Exam' },
    { id: 'lab', name: 'Laboratory' },
    { id: 'imaging', name: 'Imaging' }
  ]);

  // Update sections when note type changes
  React.useEffect(() => {
    const baseSections = [
      { id: 'noteType', name: 'Note Type' },
      { id: 'allergies', name: 'Allergies' },
      { id: 'medications', name: 'Medications' },
      { id: 'ros', name: 'Review of Systems' },
      { id: 'pe', name: 'Physical Exam' },
      { id: 'lab', name: 'Laboratory' },
      { id: 'imaging', name: 'Imaging' }
    ];
    
    // Only add intubation parameters for ICU note types
    if ((noteType === "admission" && admissionType === "icu") || (noteType === "progress" && progressType === "icu")) {
      baseSections.push({ id: 'intubation', name: 'Intubation Parameters' });
    }
    
    setSections(baseSections);
  }, [noteType, admissionType, progressType]);

  // Helper function to get translated system names
  const getTranslatedSystemName = (system: string, type: 'ros' | 'pe' | 'lab') => {
    if (language === 'fr') {
      const key = `${type}.${system.toLowerCase().replace(/[^a-z]/g, '')}`;
      const translated = t(key);
      return translated !== key ? translated : system;
    }
    return system;
  }



  const getTranslatedBloodGasType = (gasType: string): string => {
    if (language === 'fr') {
      const gasTypeTranslations: Record<string, string> = {
        'Arterial': 'Gaz artériel',
        'Venous': 'Gaz veineux',
        'Capillary': 'Gaz capillaire',
        'ABG': 'Gaz artériel',
        'VBG': 'Gaz veineux'
      };
      
      if (gasType.includes('blood gas')) {
        const type = gasType.replace(' blood gas', '');
        return gasTypeTranslations[type] || gasType;
      }
      
      return gasTypeTranslations[gasType] || gasType;
    }
    return gasType;
  };

  const getTranslatedIntubationParameterName = (paramName: string): string => {
    if (language === 'fr') {
      const paramTranslations: Record<string, string> = {
        'Ventilator Mode': 'Mode ventilatoire',
        'Tidal Volume': 'Volume courant',
        'Respiratory Rate': 'Fréquence respiratoire',
        'PEEP': 'PEEP',
        'FiO2': 'FiO2',
        'Peak Pressure': 'Pression de crête',
        'Plateau Pressure': 'Pression de plateau',
        'Mean Airway Pressure': 'Pression moyenne des voies aériennes'
      };
      
      return paramTranslations[paramName] || paramName;
    }
    return paramName;
  };

  // Helper function to translate laboratory test names
  // Enhanced lab test name mapping with OCR support
  const getLabTestName = (testName: string) => {
    if (language === 'fr') {
      const testMap: { [key: string]: string } = {
        'White Blood Cells': 'Globules blancs',
        'Red Blood Cells': 'Globules rouges',
        'Hemoglobin': 'Hémoglobine',
        'Hematocrit': 'Hématocrite',
        'Platelets': 'Plaquettes',
        'Sodium': 'Sodium',
        'Potassium': 'Potassium',
        'Chloride': 'Chlorure',
        'CO2': 'CO2',
        'Bicarbonate': 'Bicarbonate',
        'Glucose': 'Glucose',
        'Creatinine': 'Créatinine',
        'BUN': 'Urée',
        'Urea': 'Urée',
        'ALT': 'ALT',
        'AST': 'AST',
        'ALP': 'ALP',
        'Alkaline Phosphatase': 'Phosphatase alcaline',
        'Total Bilirubin': 'Bilirubine totale',
        'Albumin': 'Albumine',
        'PT': 'TP',
        'INR': 'INR',
        'PTT': 'TCA',
        'Prothrombin Time': 'Temps de prothrombine',
        'Partial Thromboplastin Time': 'Temps de thromboplastine partielle',
        'Troponin': 'Troponine',
        'CK_MB': 'CK-MB',
        'BNP': 'BNP',
        'C-Reactive Protein': 'Protéine C-réactive',
        'ESR': 'VS',
        'Procalcitonin': 'Procalcitonine',
        'pH': 'pH',
        'pCO2': 'pCO2',
        'pO2': 'pO2',
        'HCO3': 'HCO3',
        'Base Excess': 'Excès de base',
        'O2 Sat': 'SatO2',
        'Lactate': 'Lactate',
        'Mean Corpuscular Volume': 'Volume globulaire moyen'
      };
      return testMap[testName] || testName;
    }
    return testName;
  }

  // Helper function to resolve test names from OCR or predefined categories
  const resolveTestName = (testKey: string, categoryData: any, testInfo: any) => {
    if (testInfo?.name) {
      return getLabTestName(testInfo.name);
    }
    
    // OCR test name mapping
    const ocrTestMap: { [key: string]: string } = {
      'CRP': 'C-Reactive Protein',
      'Na': 'Sodium',
      'K': 'Potassium',
      'Cl': 'Chloride',
      'Hb': 'Hemoglobin',
      'GB': 'White Blood Cells',
      'Plt': 'Platelets',
      'VGM': 'Mean Corpuscular Volume',
      'TP RNI': 'Prothrombin Time (INR)',
      'TTPa': 'Partial Thromboplastin Time'
    };
    
    const mappedName = ocrTestMap[testKey] || testKey.replace(/_/g, ' ');
    return getLabTestName(mappedName);
  };

  // Helper function to translate units
  const getTranslatedUnit = (unit: string) => {
    if (language === 'fr') {
      const unitMap: { [key: string]: string } = {
        'seconds': t('lab.unit.seconds')
      };
      return unitMap[unit] || unit;
    }
    return unit;
  };

  // Helper function to translate laboratory category names
  const getLabCategoryName = (categoryName: string) => {
    if (language === 'fr') {
      const categoryMap: { [key: string]: string } = {
        'CBC': 'FSC',
        'BMP': 'Chimie',
        'LFT': 'Bilan hépatique',
        'LFTs': 'Bilan hépatique',
        'Cardiac': 'Cardiaque',
        'Inflammatory': 'Inflammatoire',
        'Blood Gases': 'Gaz'
      };
      return categoryMap[categoryName] || categoryName;
    }
    return categoryName;
  };

  // Function to scroll to a specific section in the note
  const scrollToNoteSection = useCallback((sectionKeyword: string) => {
    if (!noteTextareaRef.current || !note) return;
    
    const textarea = noteTextareaRef.current;
    const noteText = note.toLowerCase();
    const keywords = [
      sectionKeyword.toLowerCase(),
      // Common section headers to search for
      'chief complaint',
      'review of systems',
      'physical exam', 
      'examination',
      'medications',
      'laboratory',
      'imaging',
      'allergies',
      'social history',
      'intubation'
    ];
    
    let targetIndex = -1;
    for (const keyword of keywords) {
      const index = noteText.indexOf(keyword);
      if (index !== -1) {
        targetIndex = index;
        break;
      }
    }
    
    if (targetIndex !== -1) {
      // Calculate approximate line position
      const textBeforeTarget = note.substring(0, targetIndex);
      const lines = textBeforeTarget.split('\n');
      const lineHeight = 20; // Approximate line height in pixels
      const scrollPosition = Math.max(0, (lines.length - 2) * lineHeight);
      
      textarea.scrollTop = scrollPosition;
    }
  }, [note]);

  // Update note when note type or admission type changes
  React.useEffect(() => {
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  }, [noteType, admissionType, progressType]);

  // Update note when medications change
  React.useEffect(() => {
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  }, [medications]);

  // Update note when allergies change
  React.useEffect(() => {
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  }, [allergies]);

  // Update note when lab values change (including OCR extracted values)
  React.useEffect(() => {
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  }, [labValues, selectedLabCategories]);

  // Update note when social history changes
  React.useEffect(() => {
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  }, [socialHistory]);

  // Update note when chief complaint changes
  React.useEffect(() => {
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  }, [chiefComplaint]);

  // Update note when language changes
  React.useEffect(() => {
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  }, [language]);

  // Update note when imaging results change
  React.useEffect(() => {
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  }, [imagingResults, selectedImagingModalities]);

  // Imaging helper functions
  const toggleImagingRegion = (region: string) => {
    const newSelected = new Set(selectedImagingRegions);
    if (newSelected.has(region)) {
      newSelected.delete(region);
      const newModalities = { ...selectedImagingModalities };
      delete newModalities[region];
      setSelectedImagingModalities(newModalities);
      
      const newResults = { ...imagingResults };
      Object.keys(newResults).forEach(key => {
        if (key.endsWith(`_${region}`)) {
          delete newResults[key];
        }
      });
      setImagingResults(newResults);
    } else {
      newSelected.add(region);
    }
    setSelectedImagingRegions(newSelected);
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
    // Scroll to imaging section
    setTimeout(() => scrollToNoteSection('imaging'), 100);
  };

  const selectImagingModality = (region: string, modality: string) => {
    const newModalities = { ...selectedImagingModalities };
    newModalities[region] = modality;
    setSelectedImagingModalities(newModalities);
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  };

  const toggleImagingNormal = (region: string, modality: string, mode: "detailed" | "concise") => {
    const key = `${modality}_${region}`;
    const newResults = { ...imagingResults };
    newResults[key] = {
      normal: true,
      customResult: "",
      mode: mode
    };
    setImagingResults(newResults);
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  };

  const setCustomImagingResult = (region: string, modality: string, result: string) => {
    const key = `${modality}_${region}`;
    const newResults = { ...imagingResults };
    newResults[key] = {
      normal: false,
      customResult: result,
    };
    setImagingResults(newResults);
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  };

  const getTranslatedImagingRegionName = (regionKey: string): string => {
    if (language === 'fr') {
      const translations: Record<string, string> = {
        'CNS': 'SNC',
        'HEENT': 'TORL',
        'Thyroid': 'Thyroïde',
        'Thorax': 'Thorax',
        'Abdomen': 'Abdomen',
        'GU': 'Génito-urinaire',
        'Lower_Limbs': 'Membres inférieurs'
      };
      return translations[regionKey] || regionKey;
    }
    return imagingRegions[regionKey as keyof typeof imagingRegions]?.name || regionKey;
  };

  const getTranslatedImagingModality = (modality: string): string => {
    if (language === 'fr') {
      const translations: Record<string, string> = {
        'CT': 'TDM',
        'MRI': 'IRM',
        'Angiography': 'Angiographie',
        'X-Ray': 'Radiographie',
        'Ultrasound': 'Échographie',
        'Nuclear Medicine': 'Médecine nucléaire'
      };
      return translations[modality] || modality;
    }
    return modality;
  };

  // Custom lab handlers
  const addCustomLab = (labName: string) => {
    if (labName.trim() && !customLabs[labName]) {
      const newCustomLabs = { ...customLabs };
      newCustomLabs[labName] = { 
        current: tempLabData.current, 
        past: tempLabData.past.filter(val => val.trim() !== "") 
      };
      setCustomLabs(newCustomLabs);
      setNewCustomLabName("");
      setTempLabData({ current: "", past: ["", "", "", ""] });
      updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
    }
  };

  const handleCustomLabKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && newCustomLabName.trim()) {
      addCustomLab(newCustomLabName.trim());
    }
  };

  const updateCustomLabValue = (labName: string, field: 'current' | 'past', value: string, index?: number) => {
    const newCustomLabs = { ...customLabs };
    if (field === 'current') {
      newCustomLabs[labName].current = value;
    } else if (field === 'past' && typeof index === 'number') {
      newCustomLabs[labName].past[index] = value;
    }
    setCustomLabs(newCustomLabs);
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  };

  const addCustomLabPastValue = (labName: string) => {
    const newCustomLabs = { ...customLabs };
    newCustomLabs[labName].past.push("");
    setCustomLabs(newCustomLabs);
  };

  const removeCustomLabPastValue = (labName: string, index: number) => {
    const newCustomLabs = { ...customLabs };
    newCustomLabs[labName].past.splice(index, 1);
    setCustomLabs(newCustomLabs);
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  };

  const removeCustomLab = (labName: string) => {
    const newCustomLabs = { ...customLabs };
    delete newCustomLabs[labName];
    setCustomLabs(newCustomLabs);
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  };

  // Keyboard navigation for section switching
  React.useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (e.ctrlKey || e.metaKey || e.altKey) return;
      
      if (e.key === 'ArrowRight') {
        e.preventDefault();
        setCurrentSection(prev => Math.min(prev + 1, sections.length - 1));
      } else if (e.key === 'ArrowLeft') {
        e.preventDefault();
        setCurrentSection(prev => Math.max(prev - 1, 0));
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [sections]);

  const navigateToSection = (index: number) => {
    setCurrentSection(index);
  };

  const nextSection = () => {
    if (currentSection < sections.length - 1) {
      setCurrentSection(currentSection + 1);
    }
  };

  const prevSection = () => {
    if (currentSection > 0) {
      setCurrentSection(currentSection - 1);
    }
  };

  const renderCurrentSection = () => {
    const currentSectionId = sections[currentSection]?.id;
    
    switch (currentSectionId) {
      case 'noteType':
        return (
          <Card>
            <CardContent className="p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-gray-900">{t('noteType.label')}</h3>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => {
                    setNoteType(null);
                    setAdmissionType("general");
                    setProgressType("general");
                  }}
                  className="text-gray-600 hover:text-gray-800"
                >
                  {t('button.clear')}
                </Button>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div 
                  className={`p-4 border-2 rounded-lg cursor-pointer transition-all duration-200 ${
                    noteType === "admission" 
                      ? "border-blue-500 bg-blue-50" 
                      : "border-gray-200 hover:border-gray-300"
                  }`}
                  onClick={() => setNoteType("admission")}
                >
                  <div className="flex items-center space-x-2 mb-2">
                    <FileText className="w-5 h-5 text-blue-600" />
                    <span className="font-medium text-gray-900">{t('noteType.admission')}</span>
                  </div>
                  <p className="text-sm text-gray-600">{t('noteType.admission.desc')}</p>
                </div>

                <div 
                  className={`p-4 border-2 rounded-lg cursor-pointer transition-all duration-200 ${
                    noteType === "progress" 
                      ? "border-green-500 bg-green-50" 
                      : "border-gray-200 hover:border-gray-300"
                  }`}
                  onClick={() => setNoteType("progress")}
                >
                  <div className="flex items-center space-x-2 mb-2">
                    <TrendingUp className="w-5 h-5 text-green-600" />
                    <span className="font-medium text-gray-900">{t('noteType.progress')}</span>
                  </div>
                  <p className="text-sm text-gray-600">{t('noteType.progress.desc')}</p>
                </div>

                <div 
                  className={`p-4 border-2 rounded-lg cursor-pointer transition-all duration-200 ${
                    noteType === "consultation" 
                      ? "border-purple-500 bg-purple-50" 
                      : "border-gray-200 hover:border-gray-300"
                  }`}
                  onClick={() => setNoteType("consultation")}
                >
                  <div className="flex items-center space-x-2 mb-2">
                    <Users className="w-5 h-5 text-purple-600" />
                    <span className="font-medium text-gray-900">{t('noteType.consultation')}</span>
                  </div>
                  <p className="text-sm text-gray-600">{t('noteType.consultation.desc')}</p>
                </div>
              </div>

              {/* Template Selection */}
              {noteType && (
                <div className="border-t pt-4 mt-4">
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="font-medium text-gray-900">
                      {language === 'fr' ? 'Sélectionner un modèle' : 'Select Template'}
                    </h4>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setShowTemplateSelector(!showTemplateSelector)}
                    >
                      {showTemplateSelector 
                        ? (language === 'fr' ? 'Masquer' : 'Hide')
                        : (language === 'fr' ? 'Parcourir' : 'Browse')
                      }
                    </Button>
                  </div>
                  
                  {selectedTemplate ? (
                    <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <FileText className="w-4 h-4 text-blue-600" />
                          <span className="font-medium text-blue-900">{selectedTemplate.name}</span>
                          <Badge variant="secondary">{selectedTemplate.category}</Badge>
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => setSelectedTemplate(null)}
                          className="text-gray-500 hover:text-gray-700"
                        >
                          <X className="w-4 h-4" />
                        </Button>
                      </div>
                      {selectedTemplate.description && (
                        <p className="text-sm text-gray-600 mt-1">{selectedTemplate.description}</p>
                      )}
                    </div>
                  ) : (
                    <div className="p-3 border-2 border-dashed border-gray-300 rounded-lg text-center">
                      <p className="text-sm text-gray-500 mb-2">
                        {language === 'fr' 
                          ? 'Aucun modèle sélectionné - utilisation de la structure par défaut'
                          : 'No template selected - using default structure'
                        }
                      </p>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setShowTemplateSelector(true)}
                      >
                        {language === 'fr' ? 'Choisir un modèle' : 'Choose Template'}
                      </Button>
                    </div>
                  )}
                  
                  {showTemplateSelector && (
                    <div className="mt-3">
                      <TemplateSelector
                        onTemplateSelect={(template) => {
                          setSelectedTemplate(template);
                          setShowTemplateSelector(false);
                        }}
                        selectedTemplate={selectedTemplate}
                        noteType={noteType}
                        className="border-0 shadow-none"
                      />
                    </div>
                  )}
                </div>
              )}

              {/* Sub-options for admission/progress */}
              {noteType === "admission" && (
                <div className="border-t pt-4 mt-4">
                  <h4 className="font-medium text-gray-900 mb-3">{language === 'fr' ? 'Type d\'admission' : 'Admission Type'}</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    <div 
                      className={`p-3 border rounded-lg cursor-pointer transition-all duration-200 ${
                        admissionType === "general" 
                          ? "border-blue-500 bg-blue-50" 
                          : "border-gray-200 hover:border-gray-300"
                      }`}
                      onClick={() => setAdmissionType("general")}
                    >
                      <div className="flex items-center space-x-2">
                        <div className={`w-3 h-3 rounded-full ${admissionType === "general" ? "bg-blue-500" : "bg-gray-300"}`} />
                        <span className="font-medium text-gray-900">{t('admission.general')}</span>
                      </div>
                      <p className="text-sm text-gray-500 ml-5">{t('admission.general.desc')}</p>
                    </div>
                    
                    <div 
                      className={`p-3 border rounded-lg cursor-pointer transition-all duration-200 ${
                        admissionType === "icu" 
                          ? "border-blue-500 bg-blue-50" 
                          : "border-gray-200 hover:border-gray-300"
                      }`}
                      onClick={() => setAdmissionType("icu")}
                    >
                      <div className="flex items-center space-x-2">
                        <div className={`w-3 h-3 rounded-full ${admissionType === "icu" ? "bg-blue-500" : "bg-gray-300"}`} />
                        <span className="font-medium text-gray-900">{t('admission.icu')}</span>
                      </div>
                      <p className="text-sm text-gray-500 ml-5">{t('admission.icu.desc')}</p>
                    </div>
                  </div>
                </div>
              )}
              
              {noteType === "progress" && (
                <div className="border-t pt-4 mt-4">
                  <h4 className="font-medium text-gray-900 mb-3">{language === 'fr' ? 'Type d\'évolution' : 'Progress Type'}</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    <div 
                      className={`p-3 border rounded-lg cursor-pointer transition-all duration-200 ${
                        progressType === "general" 
                          ? "border-green-500 bg-green-50" 
                          : "border-gray-200 hover:border-gray-300"
                      }`}
                      onClick={() => setProgressType("general")}
                    >
                      <div className="flex items-center space-x-2">
                        <div className={`w-3 h-3 rounded-full ${progressType === "general" ? "bg-green-500" : "bg-gray-300"}`} />
                        <span className="font-medium text-gray-900">{t('progress.general')}</span>
                      </div>
                      <p className="text-sm text-gray-500 ml-5">{t('progress.general.desc')}</p>
                    </div>
                    
                    <div 
                      className={`p-3 border rounded-lg cursor-pointer transition-all duration-200 ${
                        progressType === "icu" 
                          ? "border-green-500 bg-green-50" 
                          : "border-gray-200 hover:border-gray-300"
                      }`}
                      onClick={() => setProgressType("icu")}
                    >
                      <div className="flex items-center space-x-2">
                        <div className={`w-3 h-3 rounded-full ${progressType === "icu" ? "bg-green-500" : "bg-gray-300"}`} />
                        <span className="font-medium text-gray-900">{t('progress.icu')}</span>
                      </div>
                      <p className="text-sm text-gray-500 ml-5">{t('progress.icu.desc')}</p>
                    </div>
                  </div>
                </div>
              )}

              {noteType === "consultation" && (
                <div className="border-t pt-4 mt-4">
                  <ChiefComplaintSection
                    data={chiefComplaint}
                    onChange={setChiefComplaint}
                  />
                </div>
              )}
            </CardContent>
          </Card>
        );

      case 'allergies':
        return (
          <Card className="overflow-hidden">
            <div className="bg-gradient-to-r from-purple-600 to-purple-700 px-6 py-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Shield className="text-white w-5 h-5" />
                  <h3 className="text-lg font-semibold text-white">
                    {language === 'fr' ? 'Allergies et Habitudes de vie' : 'Allergies & Social History'}
                  </h3>
                </div>
                <button
                  onClick={() => {
                    setAllergies({ hasAllergies: false, allergiesList: [] });
                    setSocialHistory({
                      smoking: { status: false, details: '' },
                      alcohol: { status: false, details: '' },
                      drugs: { status: false, details: '' }
                    });
                  }}
                  className="bg-white/20 hover:bg-white/30 text-white px-3 py-1 rounded text-sm transition-colors"
                >
                  {language === 'fr' ? 'Effacer' : 'Clear'}
                </button>
              </div>
            </div>
            <CardContent className="p-6 space-y-6">
              {/* Allergies Section */}
              <div className="space-y-4">
                <h4 className="font-medium text-gray-900 dark:text-gray-100 flex items-center gap-2">
                  <Shield className="h-4 w-4 text-purple-600" />
                  {language === 'fr' ? 'Allergies' : 'Allergies'}
                </h4>
                <div className="flex items-center gap-4">
                  <Button
                    variant={allergies.hasAllergies ? "default" : "outline"}
                    size="sm"
                    onClick={() => setAllergies({
                      hasAllergies: true,
                      allergiesList: allergies.allergiesList
                    })}
                    className="w-16"
                  >
                    {language === 'fr' ? 'Oui' : 'Yes'}
                  </Button>
                  <Button
                    variant={!allergies.hasAllergies ? "default" : "outline"}
                    size="sm"
                    onClick={() => setAllergies({
                      hasAllergies: false,
                      allergiesList: []
                    })}
                    className="w-16"
                  >
                    {language === 'fr' ? 'Non' : 'No'}
                  </Button>
                </div>
                {allergies.hasAllergies && (
                  <div className="space-y-2">
                    <Input
                      value={newAllergy}
                      onChange={(e) => setNewAllergy(e.target.value)}
                      placeholder={language === 'fr' ? 'Ajouter une allergie...' : 'Add allergy...'}
                      onKeyPress={(e) => {
                        if (e.key === 'Enter' && newAllergy.trim()) {
                          setAllergies({
                            hasAllergies: true,
                            allergiesList: [...allergies.allergiesList, newAllergy.trim()]
                          });
                          setNewAllergy('');
                        }
                      }}
                    />
                    <div className="flex flex-wrap gap-2">
                      {allergies.allergiesList.map((allergy, index) => (
                        <Badge key={index} variant="secondary" className="flex items-center gap-1">
                          {allergy}
                          <button
                            onClick={() => setAllergies({
                              hasAllergies: true,
                              allergiesList: allergies.allergiesList.filter((_, i) => i !== index)
                            })}
                            className="ml-1 hover:text-red-600"
                          >
                            ×
                          </button>
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              {/* Social History */}
              <div className="space-y-4">
                <h4 className="font-medium text-gray-900 dark:text-gray-100 flex items-center gap-2">
                  <Users className="h-4 w-4 text-purple-600" />
                  {language === 'fr' ? 'Habitudes de vie' : 'Social History'}
                </h4>
                
                {/* Smoking */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
                    {language === 'fr' ? 'Tabagisme' : 'Smoking'}
                  </label>
                  <div className="flex items-center gap-4">
                    <Button
                      variant={socialHistory.smoking.status ? "default" : "outline"}
                      size="sm"
                      onClick={() => setSocialHistory({
                        ...socialHistory,
                        smoking: { status: true, details: socialHistory.smoking.details }
                      })}
                      className="w-16"
                    >
                      {language === 'fr' ? 'Oui' : 'Yes'}
                    </Button>
                    <Button
                      variant={!socialHistory.smoking.status ? "default" : "outline"}
                      size="sm"
                      onClick={() => setSocialHistory({
                        ...socialHistory,
                        smoking: { status: false, details: '' }
                      })}
                      className="w-16"
                    >
                      {language === 'fr' ? 'Non' : 'No'}
                    </Button>
                  </div>
                  {socialHistory.smoking.status && (
                    <Input
                      value={socialHistory.smoking.details}
                      onChange={(e) => setSocialHistory({
                        ...socialHistory,
                        smoking: { status: true, details: e.target.value }
                      })}
                      placeholder={language === 'fr' ? 'ex: 1 paquet/jour ou 20 paquets-années' : 'e.g., 1 pack/day or 20 pack-years'}
                      className="mt-2"
                    />
                  )}
                </div>

                {/* Alcohol */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
                    {language === 'fr' ? 'Alcool' : 'Alcohol'}
                  </label>
                  <div className="flex items-center gap-4">
                    <Button
                      variant={socialHistory.alcohol.status ? "default" : "outline"}
                      size="sm"
                      onClick={() => setSocialHistory({
                        ...socialHistory,
                        alcohol: { status: true, details: socialHistory.alcohol.details }
                      })}
                      className="w-16"
                    >
                      {language === 'fr' ? 'Oui' : 'Yes'}
                    </Button>
                    <Button
                      variant={!socialHistory.alcohol.status ? "default" : "outline"}
                      size="sm"
                      onClick={() => setSocialHistory({
                        ...socialHistory,
                        alcohol: { status: false, details: '' }
                      })}
                      className="w-16"
                    >
                      {language === 'fr' ? 'Non' : 'No'}
                    </Button>
                  </div>
                  {socialHistory.alcohol.status && (
                    <Input
                      value={socialHistory.alcohol.details}
                      onChange={(e) => setSocialHistory({
                        ...socialHistory,
                        alcohol: { status: true, details: e.target.value }
                      })}
                      placeholder={language === 'fr' ? 'ex: 2-3 consommations/semaine' : 'e.g., 2-3 drinks/week'}
                      className="mt-2"
                    />
                  )}
                </div>

                {/* Drugs */}
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
                    {language === 'fr' ? 'Drogues' : 'Drugs'}
                  </label>
                  <div className="flex items-center gap-4">
                    <Button
                      variant={socialHistory.drugs.status ? "default" : "outline"}
                      size="sm"
                      onClick={() => setSocialHistory({
                        ...socialHistory,
                        drugs: { status: true, details: socialHistory.drugs.details }
                      })}
                      className="w-16"
                    >
                      {language === 'fr' ? 'Oui' : 'Yes'}
                    </Button>
                    <Button
                      variant={!socialHistory.drugs.status ? "default" : "outline"}
                      size="sm"
                      onClick={() => setSocialHistory({
                        ...socialHistory,
                        drugs: { status: false, details: '' }
                      })}
                      className="w-16"
                    >
                      {language === 'fr' ? 'Non' : 'No'}
                    </Button>
                  </div>
                  {socialHistory.drugs.status && (
                    <Input
                      value={socialHistory.drugs.details}
                      onChange={(e) => setSocialHistory({
                        ...socialHistory,
                        drugs: { status: true, details: e.target.value }
                      })}
                      placeholder={language === 'fr' ? 'ex: Cannabis occasionnel' : 'e.g., Occasional cannabis'}
                      className="mt-2"
                    />
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        );

      case 'medications':
        return (
          <MedicationSection 
            medications={medications}
            onMedicationsChange={setMedications}
          />
        );

      case 'ros':
        return renderRosSection();

      case 'pe':
        return renderPeSection();

      case 'lab':
        return (
          <Card className="overflow-hidden">
            <div className="bg-gradient-to-r from-emerald-600 to-emerald-700 px-6 py-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <TestTube className="text-white w-5 h-5" />
                  <h3 className="text-lg font-semibold text-white">{t('labResults.title')}</h3>
                  <span className="text-white/80 text-sm">({selectedLabCategories.size}/{Object.keys(labCategories).length})</span>
                </div>
                <button
                  onClick={() => {
                    setSelectedLabCategories(new Set());
                    setLabValues({});
                    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory);
                  }}
                  className="bg-white/20 hover:bg-white/30 text-white px-3 py-1 rounded text-sm transition-colors"
                >
                  {language === 'fr' ? t('button.clear') : 'Clear'}
                </button>
              </div>
            </div>
            <CardContent className="p-6">
              {/* Lab Image Upload Component */}
              <LabImageUpload 
                onLabValuesExtracted={(extractedLabValues) => {
                  // Group lab values by test name and create trends with timestamp sorting
                  const groupedValues: Record<string, Array<{value: string, unit: string, timestamp: string}>> = {};
                  
                  extractedLabValues.forEach(labValue => {
                    const key = labValue.testName;
                    if (!groupedValues[key]) {
                      groupedValues[key] = [];
                    }
                    groupedValues[key].push({
                      value: labValue.value,
                      unit: labValue.unit || '',
                      timestamp: (labValue as any).timestamp || ''
                    });
                  });
                  
                  // Sort each group by timestamp (most recent first)
                  Object.keys(groupedValues).forEach(testName => {
                    groupedValues[testName].sort((a, b) => {
                      // Convert YYMMDD HHMM format to comparable number
                      const parseTimestamp = (ts: string) => {
                        if (!ts) return 0;
                        const parts = ts.split(' ');
                        if (parts.length !== 2) return 0;
                        return parseInt(parts[0] + parts[1]);
                      };
                      
                      const timestampA = parseTimestamp(a.timestamp);
                      const timestampB = parseTimestamp(b.timestamp);
                      
                      return timestampB - timestampA; // Most recent first
                    });
                  });
                  
                  // Process grouped values and populate appropriate categories
                  const newLabValues = { ...labValues };
                  const newSelectedCategories = new Set(selectedLabCategories);
                  
                  Object.entries(groupedValues).forEach(([testName, values]) => {
                    // Map test names to categories (including French terms)
                    let targetCategory = '';
                    const testNameLower = testName.toLowerCase();
                    
                    // CBC/FSC (French: Formule Sanguine Complète) 
                    if (testNameLower.includes('hb') || testNameLower.includes('hemoglobin') ||
                        testNameLower.includes('hte') || testNameLower.includes('hematocrit') ||
                        testNameLower.includes('vgm') || testNameLower.includes('mcv') ||
                        testNameLower.includes('gb') || testNameLower.includes('wbc') ||
                        testNameLower.includes('plt') || testNameLower.includes('plaquettes') ||
                        testNameLower.includes('platelet')) {
                      targetCategory = 'CBC';
                    }
                    // Electrolytes - Use BMP category which exists in predefined categories
                    else if (testNameLower.includes('na') || testNameLower.includes('sodium') ||
                             testNameLower.includes('k') || testNameLower.includes('potassium') ||
                             testNameLower.includes('cl') || testNameLower.includes('chloride')) {
                      targetCategory = 'BMP';
                    }
                    // Coagulation
                    else if (testNameLower.includes('tp') || testNameLower.includes('rni') ||
                             testNameLower.includes('inr') || testNameLower.includes('ttpa') ||
                             testNameLower.includes('ptt') || testNameLower.includes('pt')) {
                      targetCategory = 'Coagulation';
                    }
                    // Chemistry/Inflammatory markers - use existing categories
                    else if (testNameLower.includes('crp') || testNameLower.includes('protein')) {
                      targetCategory = 'Inflammatory';
                    }
                    else {
                      targetCategory = 'Other';
                    }
                    
                    // Add category to selected categories
                    newSelectedCategories.add(targetCategory);
                    
                    // Initialize category in labValues if not exists
                    if (!newLabValues[targetCategory]) {
                      newLabValues[targetCategory] = {};
                    }
                    
                    // Most recent first (already sorted by timestamp)
                    const mostRecent = values[0];
                    const trends = values.slice(1, 4); // Take up to 3 older values
                    
                    // Create the lab entry with trending - store only values without units
                    const testKey = testName.replace(/\s+/g, '_').replace(/[^a-zA-Z0-9_]/g, '');
                    const currentValue = mostRecent.value; // Only the number
                    const pastValues = trends.map(trend => trend.value); // Only the numbers
                    
                    newLabValues[targetCategory][testKey] = {
                      current: currentValue,
                      past: pastValues
                    };
                  });
                  
                  setSelectedLabCategories(newSelectedCategories);
                  setLabValues(newLabValues);
                  
                  // Force update the note with the new lab values - the useEffect will handle this automatically
                  // No need for explicit updateNote call since useEffect [labValues] dependency will trigger it
                  
                  // Show success message with extracted count
                  toast({
                    title: language === 'fr' ? 'Valeurs extraites' : 'Values Extracted',
                    description: language === 'fr' 
                      ? `${Object.keys(groupedValues).length} tests de laboratoire extraits avec tendances`
                      : `${Object.keys(groupedValues).length} lab tests extracted with trends`,
                  });
                }}
              />
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {Object.entries(labCategories).map(([category, categoryData]) => {
                  if (!categoryData || !categoryData.tests) return null;
                  
                  const IconComponent = categoryData.icon;
                  const colorClass = categoryData.color;
                  const isSelected = selectedLabCategories.has(category);
                  
                  return (
                    <div key={category} className="group relative">
                      <Card 
                        className={`transition-all duration-200 hover:shadow-lg ${
                          isSelected ? 'ring-2 ring-emerald-500 bg-emerald-50' : 'hover:bg-gray-50'
                        }`}
                      >
                        <CardContent className="p-4">
                          <div 
                            className="flex items-start space-x-3 mb-3 cursor-pointer"
                            onClick={() => toggleLabCategory(category)}
                          >
                            <div className={`${colorClass} p-2 rounded-lg flex-shrink-0`}>
                              <IconComponent className="text-white w-4 h-4" />
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center justify-between mb-1">
                                <h4 className="font-semibold text-gray-900 text-sm">{getLabCategoryName(category)}</h4>
                                {isSelected && (
                                  <CheckCircle className="text-green-500 w-4 h-4" />
                                )}
                              </div>
                              <p className="text-xs text-gray-600">
                                {categoryData && categoryData.tests ? Object.entries(categoryData.tests).map(([key, test]) => getLabTestName(test.name)).join(', ') : 'Extracted lab values'}
                              </p>
                            </div>
                          </div>
                          
                          {/* Lab Value Input Section - Only show when selected */}
                          {isSelected && (
                            <div className="mt-4 space-y-3 border-t pt-4">
                              {/* Quick Normal Option */}
                              <div className="flex items-center space-x-2">
                                <input
                                  type="checkbox"
                                  checked={normalCategories[category] || false}
                                  onChange={(e) => {
                                    const newNormalCategories = {...normalCategories};
                                    newNormalCategories[category] = e.target.checked;
                                    setNormalCategories(newNormalCategories);
                                    
                                    // Clear specific values if marking as normal
                                    if (e.target.checked) {
                                      const newLabValues = {...labValues};
                                      if (newLabValues[category]) {
                                        Object.keys(newLabValues[category]).forEach(key => {
                                          if (!key.endsWith('_normal')) {
                                            delete newLabValues[category][key];
                                          }
                                        });
                                        newLabValues[category][`${category}_normal`] = {
                                          current: language === 'fr' ? 'Normal' : 'Normal',
                                          past: []
                                        };
                                      }
                                      setLabValues(newLabValues);
                                    } else {
                                      // Remove normal entry if unchecked
                                      const newLabValues = {...labValues};
                                      if (newLabValues[category] && newLabValues[category][`${category}_normal`]) {
                                        delete newLabValues[category][`${category}_normal`];
                                      }
                                      setLabValues(newLabValues);
                                    }
                                    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory);
                                  }}
                                  className="rounded"
                                />
                                <label className="text-sm text-gray-700 font-medium">
                                  {language === 'fr' ? 'Marquer comme normal' : 'Mark as normal'}
                                </label>
                              </div>
                              
                              {/* Individual Test Inputs - Only show if not marked as normal */}
                              {!normalCategories[category] && (
                                <div className="space-y-2">
                                  {Object.entries(categoryData.tests).map(([testKey, testData]) => (
                                    <div key={testKey} className="border-b border-gray-200 py-1 last:border-b-0">
                                      {/* Test name row */}
                                      <div className="mb-1">
                                        <span className="text-xs font-medium text-gray-800">{getLabTestName(testData.name)}</span>
                                        <span className="text-xs text-gray-500 ml-2">({testData.range} {testData.unit})</span>
                                      </div>
                                      
                                      {/* Input row - properly contained */}
                                      <div className="flex items-center gap-1 flex-wrap">
                                        {/* Current value input */}
                                        <input
                                          type="text"
                                          placeholder="Current"
                                          value={labValues[category]?.[testKey]?.current || ''}
                                          onChange={(e) => {
                                            const newLabValues = {...labValues};
                                            if (!newLabValues[category]) newLabValues[category] = {};
                                            if (!newLabValues[category][testKey]) {
                                              newLabValues[category][testKey] = { current: '', past: ['', '', ''] };
                                            }
                                            newLabValues[category][testKey].current = e.target.value;
                                            setLabValues(newLabValues);
                                            updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory);
                                          }}
                                          className="w-20 px-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                        />
                                        
                                        {/* Fixed 3 past value inputs */}
                                        {[0, 1, 2].map((index) => (
                                          <input
                                            key={index}
                                            type="text"
                                            placeholder={`P${index + 1}`}
                                            value={labValues[category]?.[testKey]?.past?.[index] || ''}
                                            onChange={(e) => {
                                              const newLabValues = {...labValues};
                                              if (!newLabValues[category]) newLabValues[category] = {};
                                              if (!newLabValues[category][testKey]) {
                                                newLabValues[category][testKey] = { current: '', past: ['', '', ''] };
                                              }
                                              if (!newLabValues[category][testKey].past) {
                                                newLabValues[category][testKey].past = ['', '', ''];
                                              }
                                              newLabValues[category][testKey].past[index] = e.target.value;
                                              setLabValues(newLabValues);
                                              updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory);
                                            }}
                                            className="w-14 px-1 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                          />
                                        ))}
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              )}
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        );

      case 'imaging':
        return (
          <Card className="overflow-hidden">
            <div className="bg-gradient-to-r from-purple-600 to-purple-700 px-6 py-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Camera className="text-white w-5 h-5" />
                  <h3 className="text-lg font-semibold text-white">{language === 'fr' ? 'Imagerie' : 'Imagery'}</h3>
                  <span className="text-white/80 text-sm">({selectedImagingRegions.size}/{Object.keys(imagingRegions).length})</span>
                </div>
                <button
                  onClick={() => {
                    setSelectedImagingRegions(new Set());
                    setSelectedImagingModalities({});
                    setImagingResults({});
                    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
                  }}
                  className="bg-white/20 hover:bg-white/30 text-white px-3 py-1 rounded text-sm transition-colors"
                >
                  {language === 'fr' ? 'Effacer' : 'Clear'}
                </button>
              </div>
            </div>
            <CardContent className="p-4">
              <div className="grid grid-cols-3 gap-4">
                {/* Anatomical Regions */}
                <div className="space-y-2">
                  <h4 className="font-semibold text-gray-900 text-xs mb-2">{language === 'fr' ? 'Régions anatomiques' : 'Anatomical Regions'}</h4>
                  <div className="max-h-60 overflow-y-auto space-y-1">
                    {Object.entries(imagingRegions).map(([regionKey, regionData]) => {
                      const IconComponent = regionData.icon;
                      const colorClass = regionData.color;
                      const isSelected = selectedImagingRegions.has(regionKey);
                      
                      return (
                        <Card 
                          key={regionKey} 
                          className={`cursor-pointer transition-all duration-200 hover:shadow-md ${
                            isSelected ? 'ring-2 ring-purple-500 bg-purple-50' : 'hover:bg-gray-50'
                          }`}
                          onClick={() => toggleImagingRegion(regionKey)}
                        >
                          <CardContent className="p-2">
                            <div className="flex items-center space-x-2">
                              <div className={`${colorClass} p-1 rounded flex-shrink-0`}>
                                <IconComponent className="text-white w-3 h-3" />
                              </div>
                              <span className="text-xs font-medium text-gray-900">{getTranslatedImagingRegionName(regionKey)}</span>
                              {isSelected && (
                                <CheckCircle className="text-green-500 w-3 h-3 ml-auto" />
                              )}
                            </div>
                          </CardContent>
                        </Card>
                      );
                    })}
                  </div>
                </div>

                {/* Modalities */}
                <div className="space-y-2">
                  <h4 className="font-semibold text-gray-900 text-xs mb-2">{language === 'fr' ? 'Modalités' : 'Modalities'}</h4>
                  <div className="max-h-60 overflow-y-auto space-y-2">
                    {Array.from(selectedImagingRegions).map(regionKey => {
                      const region = imagingRegions[regionKey as keyof typeof imagingRegions];
                      const selectedModality = selectedImagingModalities[regionKey];
                      
                      return (
                        <div key={regionKey} className="space-y-1">
                          <h5 className="text-xs font-medium text-gray-600 px-1">{getTranslatedImagingRegionName(regionKey)}</h5>
                          <div className="space-y-1">
                            {region.modalities.map(modality => (
                              <Card 
                                key={modality}
                                className={`cursor-pointer transition-all duration-200 hover:shadow-sm ${
                                  selectedModality === modality ? 'ring-1 ring-purple-400 bg-purple-50' : 'hover:bg-gray-50'
                                }`}
                                onClick={() => setSelectedImagingModalities({...selectedImagingModalities, [regionKey]: modality})}
                              >
                                <CardContent className="p-2">
                                  <div className="flex items-center justify-between">
                                    <span className="text-xs text-gray-700">{getTranslatedImagingModality(modality)}</span>
                                    {selectedModality === modality && (
                                      <CheckCircle className="text-green-500 w-3 h-3" />
                                    )}
                                  </div>
                                </CardContent>
                              </Card>
                            ))}
                          </div>
                        </div>
                      );
                    })}
                    {selectedImagingRegions.size === 0 && (
                      <p className="text-xs text-gray-500 italic px-1">{language === 'fr' ? 'Sélectionnez une région anatomique' : 'Select an anatomical region'}</p>
                    )}
                  </div>
                </div>

                {/* Results */}
                <div className="space-y-2">
                  <h4 className="font-semibold text-gray-900 text-xs mb-2">{language === 'fr' ? 'Résultats' : 'Results'}</h4>
                  <div className="max-h-60 overflow-y-auto space-y-2">
                    {Object.entries(selectedImagingModalities).map(([regionKey, modality]) => {
                      const resultKey = `${modality}_${regionKey}`;
                      const currentResult = imagingResults[resultKey];
                      const findingKey = resultKey as keyof typeof imagingFindings;
                      const findings = imagingFindings[findingKey];
                      
                      return (
                        <div key={resultKey} className="space-y-2">
                          <h5 className="text-xs font-medium text-gray-600 px-1">{getTranslatedImagingModality(modality)} - {getTranslatedImagingRegionName(regionKey)}</h5>
                          
                          {/* Normal checkbox with hover for detailed/concise */}
                          <div className="group relative">
                            <Card className={`transition-all duration-200 ${currentResult?.normal ? 'bg-green-50 border-green-200' : 'hover:bg-gray-50'}`}>
                              <CardContent className="p-2">
                                <div className="flex items-center justify-between">
                                  <label className="flex items-center space-x-2 cursor-pointer">
                                    <input
                                      type="checkbox"
                                      checked={currentResult?.normal || false}
                                      onChange={(e) => toggleImagingNormal(regionKey, modality, e.target.checked ? "detailed" : "concise")}
                                      className="rounded border-gray-300 text-green-600 focus:ring-green-500"
                                    />
                                    <span className="text-xs text-gray-700">{language === 'fr' ? 'Normal' : 'Normal'}</span>
                                  </label>
                                </div>
                              </CardContent>
                            </Card>

                            {/* Hover options for detailed/concise */}
                            {currentResult?.normal && findings && (
                              <div className="absolute z-10 top-0 left-0 right-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 bg-white border border-gray-200 rounded shadow-lg">
                                <div className="flex">
                                  <div 
                                    className={`flex-1 p-2 cursor-pointer hover:bg-blue-50 border-r border-gray-200 ${
                                      currentResult.mode === "detailed" ? "bg-blue-100" : ""
                                    }`}
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      toggleImagingNormal(regionKey, modality, "detailed");
                                    }}
                                  >
                                    <div className="text-center p-1">
                                      <h6 className="font-medium text-gray-900 text-xs mb-1">{language === 'fr' ? 'Détaillé' : 'Detailed'}</h6>
                                      <p className="text-xs text-gray-600 leading-relaxed break-words">{(language === 'fr' && (findings as any).detailed_fr ? (findings as any).detailed_fr : findings.detailed).substring(0, 50)}...</p>
                                    </div>
                                  </div>
                                  <div 
                                    className={`flex-1 p-2 cursor-pointer hover:bg-purple-50 ${
                                      currentResult.mode === "concise" ? "bg-purple-100" : ""
                                    }`}
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      toggleImagingNormal(regionKey, modality, "concise");
                                    }}
                                  >
                                    <div className="text-center p-1">
                                      <h6 className="font-medium text-gray-900 text-xs mb-1">{language === 'fr' ? 'Concis' : 'Concise'}</h6>
                                      <p className="text-xs text-gray-600 leading-relaxed break-words">{(language === 'fr' && (findings as any).concise_fr ? (findings as any).concise_fr : findings.concise).substring(0, 50)}...</p>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            )}
                          </div>

                          {/* Custom result text area */}
                          <Textarea
                            placeholder={language === 'fr' ? 'Résultats personnalisés...' : 'Custom results...'}
                            value={currentResult?.customResult || ""}
                            onChange={(e) => setCustomImagingResult(regionKey, modality, e.target.value)}
                            className="min-h-[60px] text-xs"
                          />
                        </div>
                      );
                    })}
                    {Object.keys(selectedImagingModalities).length === 0 && (
                      <p className="text-xs text-gray-500 italic px-1">{language === 'fr' ? 'Sélectionnez une modalité' : 'Select a modality'}</p>
                    )}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        );

      case 'intubation':
        return (
          <Card className="overflow-hidden">
            <div className="bg-gradient-to-r from-blue-600 to-blue-700 px-6 py-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Activity className="text-white w-5 h-5" />
                  <h3 className="text-lg font-semibold text-white">{language === 'fr' ? 'Paramètres d\'intubation' : 'Intubation Parameters'}</h3>
                  <span className="text-white/80 text-sm">({Object.keys(intubationValues).filter(key => intubationValues[key]?.current).length}/{Object.keys(intubationParameters).length})</span>
                </div>
                <button
                  onClick={() => {
                    setIntubationValues({});
                    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes);
                  }}
                  className="bg-white/20 hover:bg-white/30 px-3 py-1 rounded text-white text-sm transition-colors"
                >
                  {t('button.clear')}
                </button>
              </div>
            </div>
            
            <CardContent className="p-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {Object.entries(intubationParameters).map(([paramKey, paramData]) => {
                  const translatedName = getTranslatedIntubationParameterName(paramData.name);
                  
                  return (
                    <div key={paramKey} className="space-y-3">
                      <label className="text-sm font-medium text-gray-700">
                        {translatedName} {paramData.unit && `(${paramData.unit})`}
                      </label>
                      
                      <div className="space-y-4">
                        {/* Current Value */}
                        <div>
                          <div className="flex justify-between items-center mb-2">
                            <label className="text-xs text-gray-500">
                              {language === 'fr' ? 'Actuel' : 'Current'}
                            </label>
                            <span className="text-sm font-medium text-gray-900">
                              {intubationValues[paramKey]?.current || (paramData as any).min || 0}
                              {paramData.unit && ` ${paramData.unit}`}
                            </span>
                          </div>
                          {(paramData as any).options ? (
                            <Select
                              value={intubationValues[paramKey]?.current || ''}
                              onValueChange={(value) => {
                                const newValues = { ...intubationValues };
                                if (!newValues[paramKey]) {
                                  newValues[paramKey] = { current: '', past: ['', '', ''] };
                                }
                                newValues[paramKey].current = value;
                                setIntubationValues(newValues);
                                updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes);
                              }}
                            >
                              <SelectTrigger className="w-full">
                                <SelectValue placeholder="Select mode" />
                              </SelectTrigger>
                              <SelectContent>
                                {(paramData as any).options.map((option: string) => (
                                  <SelectItem key={option} value={option}>{option}</SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          ) : (
                            <Slider
                              value={[parseInt(intubationValues[paramKey]?.current) || (paramData as any).min || 0]}
                              onValueChange={(value) => {
                                const newValues = { ...intubationValues };
                                if (!newValues[paramKey]) {
                                  newValues[paramKey] = { current: '', past: ['', '', ''] };
                                }
                                newValues[paramKey].current = value[0].toString();
                                setIntubationValues(newValues);
                                updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes);
                              }}
                              max={(paramData as any).max || 100}
                              min={(paramData as any).min || 0}
                              step={(paramData as any).step || 1}
                              className="w-full"
                            />
                          )}
                        </div>
                        
                        {/* Past Values */}
                        <div className="grid grid-cols-3 gap-3">
                          {[0, 1, 2].map((index) => (
                            <div key={index}>
                              <div className="flex justify-between items-center mb-2">
                                <label className="text-xs text-gray-500">
                                  P{index + 1}
                                </label>
                                <span className="text-sm font-medium text-gray-700">
                                  {intubationValues[paramKey]?.past?.[index] || (paramData as any).min || 0}
                                  {paramData.unit && ` ${paramData.unit}`}
                                </span>
                              </div>
                              {(paramData as any).options ? (
                                <Select
                                  value={intubationValues[paramKey]?.past?.[index] || ''}
                                  onValueChange={(value) => {
                                    const newValues = { ...intubationValues };
                                    if (!newValues[paramKey]) {
                                      newValues[paramKey] = { current: '', past: ['', '', ''] };
                                    }
                                    if (!newValues[paramKey].past) {
                                      newValues[paramKey].past = ['', '', ''];
                                    }
                                    newValues[paramKey].past[index] = value;
                                    setIntubationValues(newValues);
                                    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes);
                                  }}
                                >
                                  <SelectTrigger className="w-full">
                                    <SelectValue placeholder="--" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    {(paramData as any).options.map((option: string) => (
                                      <SelectItem key={option} value={option}>{option}</SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              ) : (
                                <Slider
                                  value={[parseInt(intubationValues[paramKey]?.past?.[index]) || (paramData as any).min || 0]}
                                  onValueChange={(value) => {
                                    const newValues = { ...intubationValues };
                                    if (!newValues[paramKey]) {
                                      newValues[paramKey] = { current: '', past: ['', '', ''] };
                                    }
                                    if (!newValues[paramKey].past) {
                                      newValues[paramKey].past = ['', '', ''];
                                    }
                                    newValues[paramKey].past[index] = value[0].toString();
                                    setIntubationValues(newValues);
                                    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes);
                                  }}
                                  max={(paramData as any).max || 100}
                                  min={(paramData as any).min || 0}
                                  step={(paramData as any).step || 1}
                                  className="w-full"
                                />
                              )}
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        );

      default:
        return <div>Section not found</div>;
    }
  };

  // Initial update to show instruction message when no note type is selected
  React.useEffect(() => {
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
  }, []);

  const toggleLabCategory = (category: string) => {
    const newSelected = new Set(selectedLabCategories);
    if (newSelected.has(category)) {
      newSelected.delete(category);
      // Clear lab values for this category
      const newLabValues = { ...labValues };
      delete newLabValues[category];
      setLabValues(newLabValues);
      
      // Remove from normal categories
      const newNormalCategories = new Set(normalCategories);
      newNormalCategories.delete(category);
      setNormalCategories(newNormalCategories);
    } else {
      newSelected.add(category);
      // Initialize lab values for this category
      const categoryTests = labCategories[category as keyof typeof labCategories].tests;
      const newLabValues = { ...labValues };
      newLabValues[category] = {};
      Object.keys(categoryTests).forEach(test => {
        newLabValues[category][test] = { current: "", past: ["", "", "", ""] };
      });
      setLabValues(newLabValues);
    }
    setSelectedLabCategories(newSelected);
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory);
    // Scroll to laboratory section
    setTimeout(() => scrollToNoteSection('laboratory'), 100);
  };

  const updateLabValue = (category: string, test: string, value: string, type: 'current' | 'past' = 'current', pastIndex?: number) => {
    const newLabValues = { ...labValues };
    if (!newLabValues[category]) {
      newLabValues[category] = {};
    }
    if (!newLabValues[category][test]) {
      newLabValues[category][test] = { current: "", past: ["", "", "", ""] };
    }
    
    if (type === 'current') {
      newLabValues[category][test].current = value;
    } else if (pastIndex !== undefined) {
      // Update specific past value index
      const pastValues = [...newLabValues[category][test].past];
      while (pastValues.length < 4) {
        pastValues.push("");
      }
      pastValues[pastIndex] = value;
      newLabValues[category][test].past = pastValues;
    }
    
    setLabValues(newLabValues);
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory);
  };

  const toggleNormalValues = (category: string) => {
    const newLabValues = { ...labValues };
    const newNormalCategories = new Set(normalCategories);
    
    if (normalCategories.has(category)) {
      // Remove normal setting
      if (newLabValues[category]) {
        const categoryKey = `${category}_normal`;
        delete newLabValues[category][categoryKey];
        
        // If no other values exist, clear the category completely
        if (Object.keys(newLabValues[category]).length === 0) {
          delete newLabValues[category];
        }
      }
      newNormalCategories.delete(category);
    } else {
      // Set normal values
      if (!newLabValues[category]) {
        newLabValues[category] = {};
      }
      
      const categoryKey = `${category}_normal`;
      newLabValues[category][categoryKey] = { 
        current: `${category} normal`, 
        past: ["", "", "", ""] 
      };
      newNormalCategories.add(category);
    }
    
    setNormalCategories(newNormalCategories);
    setLabValues(newLabValues);
    updateNote(selectedRosSystems, selectedPeSystems, rosSystemModes, medications, allergies, socialHistory);
  };

  const toggleRosSystem = (system: string, mode: "detailed" | "concise") => {
    const newSelected = new Set(selectedRosSystems);
    const newModes = { ...rosSystemModes };
    
    if (newSelected.has(system) && rosSystemModes[system] === mode) {
      // If already selected with same mode, remove it
      newSelected.delete(system);
      delete newModes[system];
    } else {
      // Add or update the system with new mode
      newSelected.add(system);
      newModes[system] = mode;
    }
    
    setSelectedRosSystems(newSelected);
    setRosSystemModes(newModes);
    updateNote(newSelected, selectedPeSystems, newModes, medications, allergies, socialHistory, chiefComplaint);
    
    // Scroll to review of systems section
    setTimeout(() => scrollToNoteSection('review of systems'), 100);
    
    toast({
      title: newSelected.has(system) ? "ROS System Added" : "ROS System Removed", 
      description: `${system} ${newSelected.has(system) ? `(${mode}) added to` : "removed from"} note`,
    });
  };

  const togglePeSystem = (system: string) => {
    const newSelected = new Set(selectedPeSystems);
    if (newSelected.has(system)) {
      newSelected.delete(system);
    } else {
      newSelected.add(system);
    }
    setSelectedPeSystems(newSelected);
    updateNote(selectedRosSystems, newSelected, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
    
    // Scroll to physical exam section
    setTimeout(() => scrollToNoteSection('physical exam'), 100);
    
    toast({
      title: newSelected.has(system) ? "PE System Added" : "PE System Removed",
      description: `${system} ${newSelected.has(system) ? "added to" : "removed from"} note`,
    });
  };

  const selectAllRosSystems = () => {
    const allSystems = new Set(Object.keys(rosOptions));
    const allModes: Record<string, "detailed" | "concise"> = {};
    Object.keys(rosOptions).forEach(system => {
      allModes[system] = "detailed";
    });
    setSelectedRosSystems(allSystems);
    setRosSystemModes(allModes);
    updateNote(allSystems, selectedPeSystems, allModes, medications, allergies, socialHistory, chiefComplaint);
    toast({
      title: "All ROS Systems Selected",
      description: "Complete ROS with all pertinent negatives generated",
    });
  };

  const selectAllPeSystems = () => {
    const allSystems = new Set(Object.keys(physicalExamOptions));
    setSelectedPeSystems(allSystems);
    updateNote(selectedRosSystems, allSystems, rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
    toast({
      title: "All PE Systems Selected",
      description: "Complete Physical Exam with all normal findings generated",
    });
  };

  const selectAllSystems = () => {
    const allRosSystems = new Set(Object.keys(rosOptions));
    const allPeSystems = new Set(Object.keys(physicalExamOptions));
    const allModes: Record<string, "detailed" | "concise"> = {};
    Object.keys(rosOptions).forEach(system => {
      allModes[system] = "detailed";
    });
    setSelectedRosSystems(allRosSystems);
    setSelectedPeSystems(allPeSystems);
    setRosSystemModes(allModes);
    updateNote(allRosSystems, allPeSystems, allModes, medications, allergies, socialHistory, chiefComplaint);
    toast({
      title: "All Systems Selected",
      description: "Complete ROS and Physical Exam generated",
    });
  };

  const resetForm = () => {
    setSelectedRosSystems(new Set());
    setSelectedPeSystems(new Set());
    setSelectedLabCategories(new Set());
    setLabValues({});
    setNormalCategories(new Set());
    setBloodGasTypes({});
    setRosSystemModes({});
    setIntubationValues({});
    setMedications({ homeMedications: [], hospitalMedications: [] });
    setAllergies({ hasAllergies: false, allergiesList: [] });
    setSocialHistory({
      smoking: { status: false, details: '' },
      alcohol: { status: false, details: '' },
      drugs: { status: false, details: '' }
    });
    setChiefComplaint({
      selectedTemplate: '',
      customComplaint: '',
      presentingSymptoms: '',
      onsetDuration: '',
      associatedSymptoms: '',
      aggravatingFactors: '',
      relievingFactors: '',
      previousTreatment: ''
    });
    setSelectedImagingRegions(new Set());
    setSelectedImagingModalities({});
    setImagingResults({});
    setNote("");
    setAllergiesExpanded(false);
    setNoteType(null);
    setAdmissionType("general");
    setProgressType("general");
    toast({
      title: "Form Reset",
      description: "All selections have been cleared",
    });
  };

  // Helper function to generate allergies and social history sections
  const generateAllergiesAndSocialHistory = (allergiesData: AllergiesData, socialHistoryData: SocialHistoryData, isfrench: boolean = false) => {
    // Generate allergies section
    let allergiesSection = isfrench ? "ALLERGIES :\n" : "ALLERGIES:\n";
    if (allergiesData.hasAllergies) {
      if (allergiesData.allergiesList.length > 0 && allergiesData.allergiesList.some(a => a.trim())) {
        allergiesSection += allergiesData.allergiesList.filter(a => a.trim()).join('\n');
      } else {
        allergiesSection += isfrench ? "[Entrer les allergies]" : "[Enter allergies]";
      }
    } else {
      allergiesSection += isfrench ? "Aucune allergie connue" : "No known allergies";
    }
    
    // Generate social history section
    let socialSection = isfrench ? "\n\nHABITUDES DE VIE :\n" : "\n\nSOCIAL HISTORY:\n";
    const socialItems = [];
    
    if (socialHistoryData.smoking.status) {
      if (socialHistoryData.smoking.details.trim()) {
        socialItems.push(isfrench ? `Tabagisme : ${socialHistoryData.smoking.details}` : `Smoking: ${socialHistoryData.smoking.details}`);
      } else {
        socialItems.push(isfrench ? "Tabagisme : [Entrer les détails]" : "Smoking: [Enter details]");
      }
    } else {
      socialItems.push(isfrench ? "Non-fumeur" : "No smoking");
    }
    
    if (socialHistoryData.alcohol.status) {
      if (socialHistoryData.alcohol.details.trim()) {
        socialItems.push(isfrench ? `Alcool : ${socialHistoryData.alcohol.details}` : `Alcohol: ${socialHistoryData.alcohol.details}`);
      } else {
        socialItems.push(isfrench ? "Alcool : [Entrer les détails]" : "Alcohol: [Enter details]");
      }
    } else {
      socialItems.push(isfrench ? "Pas d'alcool" : "No alcohol");
    }
    
    if (socialHistoryData.drugs.status) {
      if (socialHistoryData.drugs.details.trim()) {
        socialItems.push(isfrench ? `Drogues : ${socialHistoryData.drugs.details}` : `Drugs: ${socialHistoryData.drugs.details}`);
      } else {
        socialItems.push(isfrench ? "Drogues : [Entrer les détails]" : "Drugs: [Enter details]");
      }
    } else {
      socialItems.push(isfrench ? "Pas de drogues" : "No drugs");
    }
    
    socialSection += socialItems.join('\n');
    return allergiesSection + socialSection;
  };

  const generateChiefComplaintText = (chiefComplaintData: ChiefComplaintData, isfrench: boolean = false) => {
    if (!chiefComplaintData.selectedTemplate || !chiefComplaintData.customComplaint.trim()) {
      return isfrench ? "[Entrer le motif de consultation]" : "[Enter reason for consultation]";
    }

    let ccText = chiefComplaintData.customComplaint.trim();
    
    if (chiefComplaintData.selectedTemplate !== 'basic' && chiefComplaintData.presentingSymptoms.trim()) {
      ccText += `. ${chiefComplaintData.presentingSymptoms.trim()}`;
    }
    
    if (chiefComplaintData.onsetDuration.trim()) {
      ccText += `. ${isfrench ? 'Début' : 'Onset'}: ${chiefComplaintData.onsetDuration.trim()}`;
    }
    
    if (chiefComplaintData.associatedSymptoms.trim()) {
      ccText += `. ${isfrench ? 'Symptômes associés' : 'Associated symptoms'}: ${chiefComplaintData.associatedSymptoms.trim()}`;
    }
    
    return ccText;
  };

  // Generate imaging results text
  const generateImagingText = () => {
    if (Object.keys(selectedImagingModalities).length === 0) {
      return "";
    }

    const imagingEntries: string[] = [];
    
    Object.entries(selectedImagingModalities).forEach(([regionKey, modality]) => {
      const resultKey = `${modality}_${regionKey}`;
      const currentResult = imagingResults[resultKey];
      const findingKey = resultKey as keyof typeof imagingFindings;
      const findings = imagingFindings[findingKey];
      
      if (currentResult) {
        // Create a proper imaging study name based on modality and region
        let studyName = "";
        const regionName = getTranslatedImagingRegionName(regionKey);
        
        if (modality === "X-Ray") {
          if (regionKey === "Chest") {
            studyName = language === 'fr' ? 'Radiographie pulmonaire' : 'Chest X-ray';
          } else if (regionKey === "Abdomen") {
            studyName = language === 'fr' ? 'Radiographie abdominale' : 'Abdominal X-ray';
          } else {
            studyName = language === 'fr' ? `Radiographie ${regionName}` : `${regionName} X-ray`;
          }
        } else if (modality === "CT") {
          if (regionKey === "CNS") {
            studyName = language === 'fr' ? 'TDM cérébrale' : 'CT head';
          } else if (regionKey === "Chest") {
            studyName = language === 'fr' ? 'TDM thoracique' : 'CT chest';
          } else if (regionKey === "Abdomen") {
            studyName = language === 'fr' ? 'TDM abdominale' : 'CT abdomen';
          } else {
            studyName = language === 'fr' ? `TDM ${regionName}` : `CT ${regionName}`;
          }
        } else if (modality === "MRI") {
          if (regionKey === "CNS") {
            studyName = language === 'fr' ? 'IRM cérébrale' : 'MRI brain';
          } else {
            studyName = language === 'fr' ? `IRM ${regionName}` : `MRI ${regionName}`;
          }
        } else {
          // Fallback for other modalities
          const modalityName = getTranslatedImagingModality(modality);
          studyName = `${modalityName} ${regionName}`;
        }
        
        let entry = `${studyName}: `;
        
        if (currentResult.normal && findings) {
          const mode = currentResult.mode || "concise";
          // Use French text if language is French and available
          const textKey = language === 'fr' ? `${mode}_fr` : mode;
          const findingsText = findings[textKey as keyof typeof findings] || findings[mode];
          // Extract just the findings text after the colon to avoid redundancy
          const colonIndex = findingsText.indexOf(': ');
          const cleanFindings = colonIndex !== -1 ? findingsText.substring(colonIndex + 2) : findingsText;
          entry += cleanFindings;
        } else if (currentResult.customResult && currentResult.customResult.trim() !== "") {
          entry += currentResult.customResult;
        } else {
          entry += language === 'fr' ? 'En attente' : 'Pending';
        }
        
        imagingEntries.push(entry);
      }
    });
    
    return imagingEntries.length > 0 ? imagingEntries.join("\n") : "";
  };

  const updateNote = (rosSystems: Set<string>, peSystems: Set<string>, systemModes: Record<string, "detailed" | "concise">, medicationsData: MedicationData = medications, allergiesData: AllergiesData = allergies, socialHistoryData: SocialHistoryData = socialHistory, chiefComplaintData: ChiefComplaintData = chiefComplaint) => {
    // Generate individual section templates without directly setting the note
    generateSectionTemplates(rosSystems, peSystems, systemModes, medicationsData, allergiesData, socialHistoryData, chiefComplaintData);
  };

  const generateSectionTemplates = (rosSystems: Set<string>, peSystems: Set<string>, systemModes: Record<string, "detailed" | "concise">, medicationsData: MedicationData = medications, allergiesData: AllergiesData = allergies, socialHistoryData: SocialHistoryData = socialHistory, chiefComplaintData: ChiefComplaintData = chiefComplaint) => {
    // If no note type is selected, show instruction message
    if (noteType === null) {
      const instructionText = language === 'fr' 
        ? 'Sélectionnez un type de note (Admission, Évolution ou Consultation) pour commencer à générer votre note clinique.'
        : 'Select a note type (Admission, Progress, or Consultation) to start generating your clinical note.';
      setNote(instructionText);
      return;
    }

    // Generate individual section templates
    generateROSTemplate(rosSystems, systemModes);
    generatePhysicalExamTemplate(peSystems);
    generateLaboratoryTemplate();
    generateImagingTemplate();
    generateAllergiesTemplate(allergiesData);
    generateSocialHistoryTemplate(socialHistoryData);
    generateMedicationsTemplate(medicationsData);

    // Generate and set the final note
    const finalNote = generateFinalNote();
    setNote(finalNote);
  };

  // Generate ROS section template
  const generateROSTemplate = (rosSystems: Set<string>, systemModes: Record<string, "detailed" | "concise">) => {
    let rosTemplate = "";
    if (rosSystems.size > 0) {
      const rosEntries = Array.from(rosSystems).map(system => {
        if (language === 'fr') {
          const mode = systemModes[system] || "detailed";
          const key = `ros.findings.${system.toLowerCase().replace(/[^a-z]/g, '')}.${mode}`;
          const frenchFindings = t(key);
          return frenchFindings !== key ? frenchFindings : rosOptions[system as keyof typeof rosOptions][mode];
        } else {
          const findings = rosOptions[system as keyof typeof rosOptions];
          const mode = systemModes[system] || "detailed";
          return findings[mode];
        }
      });
      
      rosTemplate = rosEntries.join(", ") + ".";
      
      const uncoveredRosSystems = Object.keys(rosOptions).filter(system => !rosSystems.has(system));
      if (uncoveredRosSystems.length > 0) {
        rosTemplate += language === 'fr' ? ` ${t('note.allOtherSystemsNegative')}` : " All other systems reviewed and negative.";
      }
    }
    
    updateSectionTemplate('ros', rosTemplate);
  };

  // Generate Physical Exam section template
  const generatePhysicalExamTemplate = (peSystems: Set<string>) => {
    let peTemplate = "";
    if (peSystems.size > 0) {
      const peEntries = Array.from(peSystems).map(system => {
        if (language === 'fr') {
          const frenchFindings = t(`pe.findings.${system.toLowerCase().replace(/[^a-z]/g, '')}`);
          const findings = frenchFindings !== `pe.findings.${system.toLowerCase().replace(/[^a-z]/g, '')}` ? frenchFindings : physicalExamOptions[system as keyof typeof physicalExamOptions];
          return findings;
        } else {
          const findings = physicalExamOptions[system as keyof typeof physicalExamOptions];
          return `${system}: ${findings}`;
        }
      });
      peTemplate = peEntries.join("\n");
    }
    
    updateSectionTemplate('physicalExam', peTemplate);
  };

  // Generate Laboratory section template
  const generateLaboratoryTemplate = () => {
    // Create laboratory template here
    let labTemplate = "";
    // Implementation will be added
    updateSectionTemplate('laboratory', labTemplate);
  };

  // Generate other missing templates
  const generateImagingTemplate = () => {
    const imagingTemplate = generateImagingText();
    updateSectionTemplate('imaging', imagingTemplate);
  };

  const generateAllergiesTemplate = (allergiesData: AllergiesData) => {
    const allergiesTemplate = generateAllergiesAndSocialHistory(allergiesData, socialHistory, language === 'fr').split('\n\n')[0];
    updateSectionTemplate('allergies', allergiesTemplate);
  };

  const generateSocialHistoryTemplate = (socialHistoryData: SocialHistoryData) => {
    const socialTemplate = generateAllergiesAndSocialHistory(allergies, socialHistoryData, language === 'fr').split('\n\n')[1] || '';
    updateSectionTemplate('socialHistory', socialTemplate);
  };

  const generateMedicationsTemplate = (medicationsData: MedicationData) => {
    const homeText = medicationsData.homeMedications.length > 0 ? formatMedicationsForNote(medicationsData.homeMedications, language) : '[Enter home medications]';
    const hospitalText = medicationsData.hospitalMedications.length > 0 ? formatMedicationsForNote(medicationsData.hospitalMedications, language) : '[Enter hospital medications]';
    const medicationsTemplate = language === 'fr' 
      ? `MÉDICAMENTS À DOMICILE :\n${homeText}\n\nMÉDICAMENTS HOSPITALIERS :\n${hospitalText}`
      : `HOME MEDICATIONS:\n${homeText}\n\nHOSPITAL MEDICATIONS:\n${hospitalText}`;
    updateSectionTemplate('medications', medicationsTemplate);
  };

  // Generate note based on selected template or basic structure
  React.useEffect(() => {
    // If no note type is selected, show instruction
    if (noteType === null) {
      const instructionText = language === 'fr' 
        ? 'Sélectionnez un type de note (Admission, Évolution ou Consultation) pour commencer à générer votre note clinique.'
        : 'Select a note type (Admission, Progress, or Consultation) to start generating your clinical note.';
      setNote(instructionText);
      return;
    }

    // If a template is selected, generate note based on template sections
    if (selectedTemplate && selectedTemplate.content) {
      generateNoteFromTemplate(selectedTemplate.content as TemplateContent);
      return;
    }

    // Fallback to basic note structure if no template is selected
    generateBasicNote();
  }, [noteType, language, allergies, socialHistory, medications, selectedTemplate]);

  // Generate note from selected template
  const generateNoteFromTemplate = (templateContent: TemplateContent) => {
    let templateNote = "";
    
    // Get enabled sections sorted by order
    const enabledSections = templateContent.sections
      .filter(section => section.isEnabled)
      .sort((a, b) => a.order - b.order);

    for (const section of enabledSections) {
      const sectionDef = getSectionById(section.sectionId);
      if (!sectionDef) continue;

      // Generate section content based on section type
      let sectionContent = "";
      
      switch (section.sectionId) {
        case 'hpi':
          sectionContent = language === 'fr' 
            ? "HISTOIRE DE LA MALADIE ACTUELLE :\n[Entrer l'HMA]"
            : "HISTORY OF PRESENTING ILLNESS:\n[Enter HPI]";
          break;
        case 'impression':
          sectionContent = language === 'fr'
            ? "IMPRESSION CLINIQUE :\n[Entrer les impressions cliniques]"
            : "CLINICAL IMPRESSION:\n[Enter clinical impressions]";
          break;
        case 'pmh':
          sectionContent = language === 'fr'
            ? "ANTÉCÉDENTS MÉDICAUX :\n[Entrer les antécédents médicaux]"
            : "PAST MEDICAL HISTORY:\n[Enter past medical history]";
          break;
        case 'meds':
          const homeText = medications.homeMedications.length > 0 
            ? formatMedicationsForNote(medications.homeMedications, language) 
            : (language === 'fr' ? '[Entrer les médicaments à domicile]' : '[Enter home medications]');
          const hospitalText = medications.hospitalMedications.length > 0 
            ? formatMedicationsForNote(medications.hospitalMedications, language) 
            : (language === 'fr' ? '[Entrer les médicaments hospitaliers]' : '[Enter hospital medications]');
          sectionContent = language === 'fr' 
            ? `MÉDICAMENTS À DOMICILE :\n${homeText}\n\nMÉDICAMENTS HOSPITALIERS :\n${hospitalText}`
            : `HOME MEDICATIONS:\n${homeText}\n\nHOSPITAL MEDICATIONS:\n${hospitalText}`;
          break;
        case 'allergies-social':
          sectionContent = generateAllergiesAndSocialHistory(allergies, socialHistory, language === 'fr');
          break;
        case 'plan':
          sectionContent = language === 'fr'
            ? "PLAN :\n[Entrer le plan de traitement]"
            : "PLAN:\n[Enter treatment plan]";
          break;
        case 'note-type':
          // Skip note type section as it's handled by the UI
          continue;
        default:
          // For other sections, use custom content or placeholder
          sectionContent = section.customContent || 
            (language === 'fr' 
              ? `${sectionDef.name.toUpperCase()} :\n[Entrer ${sectionDef.name.toLowerCase()}]`
              : `${sectionDef.name.toUpperCase()}:\n[Enter ${sectionDef.name.toLowerCase()}]`);
      }

      if (sectionContent) {
        templateNote += (templateNote ? "\n\n" : "") + sectionContent;
      }
    }

    setNote(templateNote);
  };

  // Fallback basic note generation for when no template is selected
  const generateBasicNote = () => {
    let basicNote = "";
    
    if (noteType === "admission") {
      if (language === 'fr') {
        basicNote = `MOTIF D'ADMISSION :\n[Entrer le motif d'admission]\n\n`;
        basicNote += `ANTÉCÉDENTS MÉDICAUX :\n[Entrer les antécédents médicaux]\n\n`;
        basicNote += `${generateAllergiesAndSocialHistory(allergies, socialHistory, true)}\n\n`;
        basicNote += `MÉDICAMENTS À DOMICILE :\n${medications.homeMedications.length > 0 ? formatMedicationsForNote(medications.homeMedications, 'fr') : '[Entrer les médicaments à domicile]'}\n\n`;
        basicNote += `MÉDICAMENTS HOSPITALIERS :\n${medications.hospitalMedications.length > 0 ? formatMedicationsForNote(medications.hospitalMedications, 'fr') : '[Entrer les médicaments hospitaliers]'}\n\n`;
        basicNote += `HISTOIRE DE LA MALADIE ACTUELLE :\n[Entrer l'HMA]`;
      } else {
        basicNote = `REASON FOR ADMISSION:\n[Enter reason for admission]\n\n`;
        basicNote += `PAST MEDICAL HISTORY:\n[Enter past medical history]\n\n`;
        basicNote += `${generateAllergiesAndSocialHistory(allergies, socialHistory, false)}\n\n`;
        basicNote += `HOME MEDICATIONS:\n${medications.homeMedications.length > 0 ? formatMedicationsForNote(medications.homeMedications, language) : '[Enter home medications]'}\n\n`;
        basicNote += `HOSPITAL MEDICATIONS:\n${medications.hospitalMedications.length > 0 ? formatMedicationsForNote(medications.hospitalMedications, language) : '[Enter hospital medications]'}\n\n`;
        basicNote += `HISTORY OF PRESENTING ILLNESS:\n[Enter HPI]`;
      }
    }
    
    setNote(basicNote);
  };

  // Old updateNote function content - will be cleaned up
  const oldUpdateNoteContent = () => {
      const rosEntries = Array.from(rosSystems).map(system => {
        if (language === 'fr') {
          // Use French clinical findings
          const mode = systemModes[system] || "detailed";
          const key = `ros.findings.${system.toLowerCase().replace(/[^a-z]/g, '')}.${mode}`;
          const frenchFindings = t(key);
          return frenchFindings !== key ? frenchFindings : rosOptions[system as keyof typeof rosOptions][mode];
        } else {
          const findings = rosOptions[system as keyof typeof rosOptions];
          const mode = systemModes[system] || "detailed";
          return findings[mode];
        }
      });
      
      rosText = rosEntries.join(", ") + ".";
      
      const uncoveredRosSystems = Object.keys(rosOptions).filter(system => !rosSystems.has(system));
      if (uncoveredRosSystems.length > 0) {
        rosText += language === 'fr' ? ` ${t('note.allOtherSystemsNegative')}` : " All other systems reviewed and negative.";
      }
    }
    
    // Generate Physical Exam text
    let peText = "";
    if (peSystems.size > 0) {
      const peEntries = Array.from(peSystems).map(system => {
        if (language === 'fr') {
          const systemName = getTranslatedSystemName(system, 'pe');
          const frenchFindings = t(`pe.findings.${system.toLowerCase().replace(/[^a-z]/g, '')}`);
          const findings = frenchFindings !== `pe.findings.${system.toLowerCase().replace(/[^a-z]/g, '')}` ? frenchFindings : physicalExamOptions[system as keyof typeof physicalExamOptions];
          return findings;
        } else {
          const findings = physicalExamOptions[system as keyof typeof physicalExamOptions];
          return `${system}: ${findings}`;
        }
      });
      peText = peEntries.join("\n");
    }

    // Generate Laboratory Results text
    let labText = "";
    
    // Check if we have any lab data (standard categories, OCR extracted values, or custom labs)
    const hasStandardLabs = selectedLabCategories.size > 0;
    const hasOCRLabs = Object.keys(labValues).length > 0 && Object.values(labValues).some(categoryData => 
      Object.values(categoryData).some(labData => labData.current && labData.current.trim() !== "")
    );
    const hasCustomLabs = Object.keys(customLabs).length > 0 && Object.values(customLabs).some(lab => lab.current.trim() !== "");
    
    if (hasStandardLabs || hasOCRLabs || hasCustomLabs) {
      const labSections: string[] = [];
      
      // Track processed lab tests to avoid duplicates
      const processedTests = new Set<string>();
      const allLabResults: string[] = [];
      
      // Process all labValues (includes both standard and OCR-extracted values)
      Object.entries(labValues).forEach(([category, categoryValues]) => {
        if (categoryValues && typeof categoryValues === 'object') {
          Object.entries(categoryValues).forEach(([testKey, testData]) => {
            if (testData && testData.current && testData.current.trim() !== "") {
              // Check if it's a "normal" entry
              if (testKey.endsWith('_normal')) {
                allLabResults.push(testData.current);
              } else {
                // Create a unique identifier for this test to prevent duplicates
                const testIdentifier = `${category}:${testKey}`;
                
                // Skip if already processed (prevents OCR + manual selection duplicates)
                if (processedTests.has(testIdentifier)) {
                  return;
                }
                processedTests.add(testIdentifier);
                
                // Try to get test name from predefined categories first
                const categoryData = labCategories[category as keyof typeof labCategories];
                let testName = testKey;
                
                if (categoryData && categoryData.tests && categoryData.tests[testKey as keyof typeof categoryData.tests]) {
                  const testInfo = categoryData.tests[testKey as keyof typeof categoryData.tests];
                  testName = getLabTestName(testInfo.name);
                } else {
                  // Use the helper function for OCR-extracted values
                  testName = resolveTestName(testKey, categoryData, null);
                }
                
                let labEntry = `${testName}: ${testData.current}`;
                
                // Add trending data if available
                const pastValues = testData.past ? testData.past.filter(val => val && val.trim() !== "") : [];
                if (pastValues.length > 0) {
                  labEntry += ` [${pastValues.join(", ")}]`;
                }
                
                allLabResults.push(labEntry);
              }
            }
          });
        }
      });
      

      
      // Add custom lab results (avoiding duplicates with main lab values)
      Object.entries(customLabs).forEach(([labName, labData]) => {
        if (labData.current && labData.current.trim() !== "") {
          // Check if this custom lab duplicates an existing processed test
          const customTestIdentifier = `custom:${labName}`;
          if (processedTests.has(customTestIdentifier)) {
            return;
          }
          processedTests.add(customTestIdentifier);
          
          // Apply French abbreviations in note generation
          const getAbbreviatedName = (name: string) => {
            if (language === 'fr') {
              const abbreviations: Record<string, string> = {
                'Globules blanches': 'Gb',
                'Globules blancs': 'Gb',
                'Hémoglobine': 'Hb',
                'Plaquettes': 'Plq',
                'Sodium': 'Na',
                'Potassium': 'K',
                'Créatinine': 'Créat',
                'Phosphatase alkaline': 'PAL',
                'Phosphoatase alkaline': 'PAL'
              };
              return abbreviations[name] || name;
            }
            return name;
          };

          const displayName = getAbbreviatedName(labName);
          let customLabEntry = `${displayName}: ${labData.current}`;
          
          // Add trending data if available
          const pastValues = labData.past ? labData.past.filter(val => val && val.trim() !== "") : [];
          if (pastValues.length > 0) {
            customLabEntry += ` [${pastValues.join(", ")}]`;
          }
          
          allLabResults.push(customLabEntry);
        }
      });
      
      // Add all processed lab results to sections
      if (allLabResults.length > 0) {
        labSections.push(allLabResults.join(", "));
      }
      
      if (labSections.length > 0) {
        labText = labSections.join("\n");
      }
    }
    
    // Generate note based on type
    if (noteType === "admission") {
      if (admissionType === "general") {
        if (language === 'fr') {
          noteText = `MOTIF D'ADMISSION :\n[Entrer le motif d'admission]\n\n`;
          noteText += `ANTÉCÉDENTS MÉDICAUX :\n[Entrer les antécédents médicaux]\n\n`;
          noteText += `${generateAllergiesAndSocialHistory(allergiesData, socialHistoryData, true)}\n\n`;
          // Social history is included in the allergies function above
          noteText += `MÉDICAMENTS À DOMICILE :\n${medicationsData.homeMedications.length > 0 ? formatMedicationsForNote(medicationsData.homeMedications, language) : '[Entrer les médicaments à domicile]'}\n\n`;
          noteText += `MÉDICAMENTS HOSPITALIERS :\n${medicationsData.hospitalMedications.length > 0 ? formatMedicationsForNote(medicationsData.hospitalMedications, language) : '[Entrer les médicaments hospitaliers]'}\n\n`;
          noteText += `HISTOIRE DE LA MALADIE ACTUELLE :\n[Entrer l'HMA]`;
        } else {
          noteText = `REASON FOR ADMISSION:\n[Enter reason for admission]\n\n`;
          noteText += `PAST MEDICAL HISTORY:\n[Enter past medical history]\n\n`;
          noteText += `${generateAllergiesAndSocialHistory(allergiesData, socialHistoryData, false)}\n\n`;
          // Social history is included in the allergies function above
          noteText += `HOME MEDICATIONS:\n${medicationsData.homeMedications.length > 0 ? formatMedicationsForNote(medicationsData.homeMedications, language) : '[Enter home medications]'}\n\n`;
          noteText += `HOSPITAL MEDICATIONS:\n${medicationsData.hospitalMedications.length > 0 ? formatMedicationsForNote(medicationsData.hospitalMedications, language) : '[Enter hospital medications]'}\n\n`;
          noteText += `HISTORY OF PRESENTING ILLNESS:\n[Enter HPI]`;
        }
        
        if (rosText) {
          noteText += `\n\n${rosText}`;
        }
        
        noteText += language === 'fr' ? `\n\nEXAMEN PHYSIQUE:` : `\n\nPHYSICAL EXAMINATION:`;
        if (peText) {
          noteText += `\n${peText}`;
        } else {
          noteText += language === 'fr' ? `\n[Entrer les résultats de l'examen physique]` : `\n[Enter physical examination findings]`;
        }
        
        noteText += language === 'fr' ? `\n\nRÉSULTATS DE LABORATOIRE:` : `\n\nLABORATORY RESULTS:`;
        if (labText) {
          noteText += `\n${labText}\n\n`;
        } else {
          noteText += language === 'fr' ? `\n[Entrer les résultats de laboratoire]\n\n` : `\n[Enter laboratory results]\n\n`;
        }
        
        const imagingText = generateImagingText();
        noteText += language === 'fr' ? `IMAGERIE:\n` : `IMAGING:\n`;
        if (imagingText) {
          noteText += `${imagingText}\n\n`;
        } else {
          noteText += language === 'fr' ? `[Entrer les résultats d'imagerie]\n\n` : `[Enter imaging results]\n\n`;
        }
        
        noteText += language === 'fr' ? `IMPRESSION CLINIQUE:\n[Entrer les impressions cliniques]\n\n` : `CLINICAL IMPRESSION:\n[Enter clinical impressions]\n\n`;
        noteText += language === 'fr' ? `PLAN:\n[Entrer le plan de traitement]` : `PLAN:\n[Enter treatment plan]`;
      } else {
        // ICU admission note
        if (language === 'fr') {
          noteText = `MOTIF D'ADMISSION :\n[Entrer le motif d'admission]\n\n`;
          noteText += `ANTÉCÉDENTS MÉDICAUX :\n[Entrer les antécédents médicaux]\n\n`;
          noteText += `${generateAllergiesAndSocialHistory(allergiesData, socialHistoryData, true)}\n\n`;
          // Social history is included in the allergies function above
          noteText += `MÉDICAMENTS À DOMICILE :\n${medicationsData.homeMedications.length > 0 ? formatMedicationsForNote(medicationsData.homeMedications, language) : '[Entrer les médicaments à domicile]'}\n\n`;
          noteText += `MÉDICAMENTS HOSPITALIERS :\n${medicationsData.hospitalMedications.length > 0 ? formatMedicationsForNote(medicationsData.hospitalMedications, language) : '[Entrer les médicaments hospitaliers]'}\n\n`;
          noteText += `HISTOIRE DE LA MALADIE ACTUELLE :\n[Entrer l'HMA]`;
        } else {
          noteText = `REASON FOR ADMISSION:\n[Enter reason for admission]\n\n`;
          noteText += `PAST MEDICAL HISTORY:\n[Enter past medical history]\n\n`;
          noteText += `${generateAllergiesAndSocialHistory(allergiesData, socialHistoryData, false)}\n\n`;
          // Social history is included in the allergies function above
          noteText += `HOME MEDICATIONS:\n${medicationsData.homeMedications.length > 0 ? formatMedicationsForNote(medicationsData.homeMedications, language) : '[Enter home medications]'}\n\n`;
          noteText += `HOSPITAL MEDICATIONS:\n${medicationsData.hospitalMedications.length > 0 ? formatMedicationsForNote(medicationsData.hospitalMedications, language) : '[Enter hospital medications]'}\n\n`;
          noteText += `HISTORY OF PRESENTING ILLNESS:\n[Enter HPI]`;
        }
        
        if (rosText) {
          noteText += `\n\n${rosText}`;
        }
        
        // Map PE findings and lab results to ICU system sections for admission
        const icuAdmissionSections = language === 'fr' ? {
          "NEUROLOGIQUE": {
            peFindings: ["General", "Neurological"],
            labCategories: [],
            labTests: [],
            imagingRegions: ["CNS", "HEENT"]
          },
          "HÉMODYNAMIQUE": {
            peFindings: ["Cardiovascular", "Vital"],
            labCategories: ["Cardiac"],
            labTests: ["Blood Gases:Lactate"],
            imagingRegions: []
          },
          "RESPIRATOIRE": {
            peFindings: ["Respiratory"],
            labCategories: [],
            labTests: ["Blood Gases:pH", "Blood Gases:pCO2", "Blood Gases:pO2", "Blood Gases:HCO3", "Blood Gases:Base_Excess", "Blood Gases:O2_Sat"],
            imagingRegions: ["Thorax"]
          },
          "GASTRO-INTESTINAL": {
            peFindings: ["Gastrointestinal"],
            labCategories: ["LFTs"],
            labTests: [],
            imagingRegions: ["Abdomen"]
          },
          "NÉPHRO-MÉTABOLIQUE": {
            peFindings: ["Genitourinary"],
            labCategories: ["BMP"],
            labTests: [],
            imagingRegions: ["GU"]
          },
          "HÉMATO-INFECTIEUX": {
            peFindings: ["Skin", "Extremities"],
            labCategories: ["CBC", "Inflammatory", "Coagulation"],
            labTests: [],
            imagingRegions: ["Lower_Limbs"]
          }
        } : {
          "NEUROLOGICAL": {
            peFindings: ["General", "Neurological"],
            labCategories: [],
            labTests: [],
            imagingRegions: ["CNS", "HEENT"]
          },
          "HEMODYNAMIC": {
            peFindings: ["Cardiovascular", "Vital"],
            labCategories: ["Cardiac"],
            labTests: ["Blood Gases:Lactate"],
            imagingRegions: []
          },
          "RESPIRATORY": {
            peFindings: ["Respiratory"],
            labCategories: [],
            labTests: ["Blood Gases:pH", "Blood Gases:pCO2", "Blood Gases:pO2", "Blood Gases:HCO3", "Blood Gases:Base_Excess", "Blood Gases:O2_Sat"],
            imagingRegions: ["Thorax"]
          },
          "GASTROINTESTINAL": {
            peFindings: ["Gastrointestinal"],
            labCategories: ["LFTs"],
            labTests: [],
            imagingRegions: ["Abdomen"]
          },
          "NEPHRO-METABOLIC": {
            peFindings: ["Genitourinary"],
            labCategories: ["BMP"],
            labTests: [],
            imagingRegions: ["GU"]
          },
          "HEMATO-INFECTIOUS": {
            peFindings: ["Skin", "Extremities"],
            labCategories: ["CBC", "Inflammatory", "Coagulation"],
            labTests: [],
            imagingRegions: ["Lower_Limbs"]
          }
        };
        
        Object.entries(icuAdmissionSections).forEach(([sectionName, config]) => {
          noteText += `\n\n${sectionName}:`;
          
          // Add PE findings with French translation
          const sectionPeFindings = config.peFindings.filter(system => 
            peSystems.size > 0 && Array.from(peSystems).includes(system)
          ).map(system => {
            if (language === 'fr') {
              const key = `pe.findings.${system.toLowerCase().replace(/[^a-z]/g, '')}`;
              const frenchFindings = t(key);
              return frenchFindings !== key ? frenchFindings : physicalExamOptions[system as keyof typeof physicalExamOptions];
            } else {
              const findings = physicalExamOptions[system as keyof typeof physicalExamOptions];
              return findings;
            }
          });
          
          // Add intubation parameters for respiratory section
          const intubationFindings: string[] = [];
          if ((sectionName === "RESPIRATORY" || sectionName === "RESPIRATOIRE") && Object.keys(intubationValues).length > 0) {
            const ventParams: string[] = [];
            Object.entries(intubationValues).forEach(([paramKey, paramData]) => {
              if (paramData.current && paramData.current.trim() !== "") {
                const paramInfo = intubationParameters[paramKey as keyof typeof intubationParameters];
                if (paramInfo) {
                  const translatedParamName = getTranslatedIntubationParameterName(paramInfo.name);
                  let ventEntry = `${translatedParamName}: ${paramData.current}`;
                  
                  // Add trending data if available
                  const pastValues = paramData.past.filter(val => val && val.trim() !== "");
                  if (pastValues.length > 0) {
                    ventEntry += ` (${pastValues.join(", ")})`;
                  }
                  
                  ventParams.push(ventEntry);
                }
              }
            });
            
            if (ventParams.length > 0) {
              const ventSettingsLabel = language === 'fr' ? 'Paramètres ventilatoires' : 'Ventilator settings';
              intubationFindings.push(`${ventSettingsLabel}: ${ventParams.join(", ")}`);
            }
          }
          
          // Add relevant lab results with trending
          const sectionLabFindings: string[] = [];
          
          // Handle specific lab tests first
          if (config.labTests) {
            // Group blood gas results for single line display
            const bloodGasResults: string[] = [];
            const otherLabResults: string[] = [];
            
            config.labTests.forEach(testPath => {
              const [categoryName, testKey] = testPath.split(':');
              if (labValues[categoryName] && labValues[categoryName][testKey]) {
                const testData = labValues[categoryName][testKey];
                if (testData.current && testData.current.trim() !== "") {
                  const categoryData = labCategories[categoryName as keyof typeof labCategories];
                  const testInfo = categoryData.tests[testKey as keyof typeof categoryData.tests];
                  
                  if (categoryName === "Blood Gases") {
                    // For blood gases, collect values for single line display
                    if (testKey === "Lactate") {
                      let labEntry = `Lactate ${testData.current}`;
                      const pastValues = testData.past.filter(val => val && val.trim() !== "");
                      if (pastValues.length > 0) {
                        labEntry += ` [${pastValues.join(", ")}]`;
                      }
                      otherLabResults.push(labEntry);
                    } else {
                      // Collect blood gas values for single line
                      let gasValue = `${testInfo?.name || testKey} ${testData.current}`;
                      const pastValues = testData.past.filter(val => val && val.trim() !== "");
                      if (pastValues.length > 0) {
                        gasValue += ` (${pastValues.join(", ")})`;
                      }
                      bloodGasResults.push(gasValue);
                    }
                  } else {
                    let labEntry = testInfo ? `${testInfo.name} ${testData.current}` : testData.current;
                    
                    const pastValues = testData.past.filter(val => val && val.trim() !== "");
                    if (pastValues.length > 0) {
                      labEntry += ` [${pastValues.join(", ")}]`;
                    }
                    
                    otherLabResults.push(labEntry);
                  }
                }
              }
            });
            
            // Add grouped blood gas results as single line
            if (bloodGasResults.length > 0) {
              const gasType = bloodGasTypes["Blood Gases"] ? `${bloodGasTypes["Blood Gases"]} blood gas` : "ABG";
              sectionLabFindings.push(`${gasType}: ${bloodGasResults.join(", ")}`);
            }
            
            // Add other lab results
            sectionLabFindings.push(...otherLabResults);
          }
          
          // Handle general lab categories (excluding specific tests already handled)
          config.labCategories.forEach(labCategory => {
            if (labValues[labCategory]) {
              const categoryData = labCategories[labCategory as keyof typeof labCategories];
              Object.entries(labValues[labCategory]).forEach(([testKey, testData]) => {
                // Skip if this test is already handled by specific test routing
                const isSpecificTest = config.labTests?.some(testPath => testPath === `${labCategory}:${testKey}`);
                if (isSpecificTest) return;
                
                if (testData.current && testData.current.trim() !== "") {
                  // Check if it's a "normal" entry
                  if (testKey.endsWith('_normal')) {
                    sectionLabFindings.push(testData.current);
                  } else {
                    // Get the test name from categoryData
                    const testInfo = categoryData.tests[testKey as keyof typeof categoryData.tests];
                    let labEntry = testInfo ? `${testInfo.name} ${testData.current}` : testData.current;
                    
                    // Add blood gas type if applicable
                    if (labCategory === "Blood Gases" && bloodGasTypes[labCategory]) {
                      labEntry = `${bloodGasTypes[labCategory]} ${labEntry}`;
                    }
                    
                    // Add trending data if available
                    const pastValues = testData.past.filter(val => val && val.trim() !== "");
                    if (pastValues.length > 0) {
                      labEntry += ` [${pastValues.join(", ")}]`;
                    }
                    
                    sectionLabFindings.push(labEntry);
                  }
                }
              });
            }
          });
          
          // Add relevant imaging results
          const sectionImagingFindings: string[] = [];
          if (config.imagingRegions) {
            config.imagingRegions.forEach(regionKey => {
              const selectedModality = selectedImagingModalities[regionKey];
              if (selectedModality) {
                const resultKey = `${selectedModality}_${regionKey}`;
                const currentResult = imagingResults[resultKey];
                const findingKey = resultKey as keyof typeof imagingFindings;
                const findings = imagingFindings[findingKey];
                
                if (currentResult) {
                  // Create a proper imaging study name based on modality and region
                  let studyName = "";
                  const regionName = getTranslatedImagingRegionName(regionKey);
                  
                  if (selectedModality === "X-Ray") {
                    if (regionKey === "Chest" || regionKey === "Thorax") {
                      studyName = language === 'fr' ? 'Radiographie pulmonaire' : 'Chest X-ray';
                    } else if (regionKey === "Abdomen") {
                      studyName = language === 'fr' ? 'Radiographie abdominale' : 'Abdominal X-ray';
                    } else {
                      studyName = language === 'fr' ? `Radiographie ${regionName}` : `${regionName} X-ray`;
                    }
                  } else if (selectedModality === "CT") {
                    if (regionKey === "CNS") {
                      studyName = language === 'fr' ? 'TDM cérébrale' : 'CT head';
                    } else if (regionKey === "Chest" || regionKey === "Thorax") {
                      studyName = language === 'fr' ? 'TDM thoracique' : 'CT chest';
                    } else if (regionKey === "Abdomen") {
                      studyName = language === 'fr' ? 'TDM abdominale' : 'CT abdomen';
                    } else {
                      studyName = language === 'fr' ? `TDM ${regionName}` : `CT ${regionName}`;
                    }
                  } else if (selectedModality === "MRI") {
                    if (regionKey === "CNS") {
                      studyName = language === 'fr' ? 'IRM cérébrale' : 'MRI brain';
                    } else {
                      studyName = language === 'fr' ? `IRM ${regionName}` : `MRI ${regionName}`;
                    }
                  } else {
                    // Fallback for other modalities
                    const modalityName = getTranslatedImagingModality(selectedModality);
                    studyName = `${modalityName} ${regionName}`;
                  }
                  
                  let imagingEntry = `${studyName}: `;
                  
                  if (currentResult.normal && findings) {
                    const mode = currentResult.mode || "concise";
                    // Use French text if language is French and available
                    const textKey = language === 'fr' ? `${mode}_fr` : mode;
                    const findingsText = findings[textKey as keyof typeof findings] || findings[mode];
                    // Extract just the findings text after the colon to avoid redundancy
                    const colonIndex = findingsText.indexOf(': ');
                    const cleanFindings = colonIndex !== -1 ? findingsText.substring(colonIndex + 2) : findingsText;
                    imagingEntry += cleanFindings;
                  } else if (currentResult.customResult && currentResult.customResult.trim() !== "") {
                    imagingEntry += currentResult.customResult;
                  } else {
                    imagingEntry += language === 'fr' ? 'En attente' : 'Pending';
                  }
                  
                  sectionImagingFindings.push(imagingEntry);
                }
              }
            });
          }
          
          const allFindings = [...sectionPeFindings, ...sectionLabFindings, ...intubationFindings, ...sectionImagingFindings];
          
          if (allFindings.length > 0) {
            noteText += `\n${allFindings.join("\n")}`;
          } else {
            noteText += `\n[Enter ${sectionName.toLowerCase()} findings]`;
          }
        });
        
        noteText += `\n\nCLINICAL IMPRESSION:\n[Enter clinical impressions]\n\n`;
        noteText += `PLAN:\n[Enter treatment plan]`;
      }
    } else if (noteType === "progress") {
      if (progressType === "general") {
        noteText = language === 'fr' ? `HISTOIRE DE LA MALADIE ACTUELLE:\n[Entrer le statut actuel et l'historique de l'intervalle]` : `HISTORY OF PRESENTING ILLNESS:\n[Enter current status and interval history]`;
        
        if (rosText) {
          noteText += `\n\n${rosText}`;
        }
        
        noteText += language === 'fr' ? `\n\nEXAMEN PHYSIQUE:` : `\n\nPHYSICAL EXAMINATION:`;
        if (peText) {
          noteText += `\n${peText}`;
        } else {
          noteText += language === 'fr' ? `\n[Entrer les résultats de l'examen physique]` : `\n[Enter physical examination findings]`;
        }
        
        noteText += language === 'fr' ? `\n\nRÉSULTATS DE LABORATOIRE:` : `\n\nLABORATORY RESULTS:`;
        if (labText) {
          noteText += `\n${labText}\n\n`;
        } else {
          noteText += language === 'fr' ? `\n[Entrer les résultats de laboratoire]\n\n` : `\n[Enter laboratory results]\n\n`;
        }
        
        const imagingTextProgress = generateImagingText();
        noteText += language === 'fr' ? `IMAGERIE:\n` : `IMAGING:\n`;
        if (imagingTextProgress) {
          noteText += `${imagingTextProgress}\n\n`;
        } else {
          noteText += language === 'fr' ? `[Entrer les résultats d'imagerie]\n\n` : `[Enter imaging results]\n\n`;
        }
        
        noteText += language === 'fr' ? `IMPRESSION CLINIQUE:\n[Entrer les impressions cliniques]\n\n` : `CLINICAL IMPRESSION:\n[Enter clinical impressions]\n\n`;
        noteText += language === 'fr' ? `PLAN:\n[Entrer le plan de traitement]` : `PLAN:\n[Enter treatment plan]`;
      } else if (progressType === "icu") {
        // ICU progress note
        noteText = language === 'fr' ? `HISTOIRE DE LA MALADIE ACTUELLE:\n[Entrer le statut actuel et l'historique de l'intervalle]` : `HISTORY OF PRESENTING ILLNESS:\n[Enter current status and interval history]`;
        
        if (rosText) {
          noteText += `\n\n${rosText}`;
        }
        
        // Map PE findings and lab results to ICU system sections
        const icuProgressSections = language === 'fr' ? {
          "NEUROLOGIQUE": {
            peFindings: ["General", "Neurological"],
            labCategories: [],
            labTests: [],
            imagingRegions: ["CNS", "HEENT"]
          },
          "HÉMODYNAMIQUE": {
            peFindings: ["Cardiovascular", "Vital"],
            labCategories: ["Cardiac"],
            labTests: ["Blood Gases:Lactate"],
            imagingRegions: []
          },
          "RESPIRATOIRE": {
            peFindings: ["Respiratory"],
            labCategories: [],
            labTests: ["Blood Gases:pH", "Blood Gases:pCO2", "Blood Gases:pO2", "Blood Gases:HCO3", "Blood Gases:Base_Excess", "Blood Gases:O2_Sat"],
            imagingRegions: ["Thorax"]
          },
          "GASTRO-INTESTINAL": {
            peFindings: ["Gastrointestinal"],
            labCategories: ["LFTs"],
            labTests: [],
            imagingRegions: ["Abdomen"]
          },
          "NÉPHRO-MÉTABOLIQUE": {
            peFindings: ["Genitourinary"],
            labCategories: ["BMP"],
            labTests: [],
            imagingRegions: ["GU"]
          },
          "HÉMATO-INFECTIEUX": {
            peFindings: ["Skin", "Extremities"],
            labCategories: ["CBC", "Inflammatory", "Coagulation"],
            labTests: [],
            imagingRegions: ["Lower_Limbs"]
          }
        } : {
          "NEUROLOGICAL": {
            peFindings: ["General", "Neurological"],
            labCategories: [],
            labTests: [],
            imagingRegions: ["CNS", "HEENT"]
          },
          "HEMODYNAMIC": {
            peFindings: ["Cardiovascular", "Vital"],
            labCategories: ["Cardiac"],
            labTests: ["Blood Gases:Lactate"],
            imagingRegions: []
          },
          "RESPIRATORY": {
            peFindings: ["Respiratory"],
            labCategories: [],
            labTests: ["Blood Gases:pH", "Blood Gases:pCO2", "Blood Gases:pO2", "Blood Gases:HCO3", "Blood Gases:Base_Excess", "Blood Gases:O2_Sat"],
            imagingRegions: ["Thorax"]
          },
          "GASTROINTESTINAL": {
            peFindings: ["Gastrointestinal"],
            labCategories: ["LFTs"],
            labTests: [],
            imagingRegions: ["Abdomen"]
          },
          "NEPHRO-METABOLIC": {
            peFindings: ["Genitourinary"],
            labCategories: ["BMP"],
            labTests: [],
            imagingRegions: ["GU"]
          },
          "HEMATO-INFECTIOUS": {
            peFindings: ["Skin", "Extremities"],
            labCategories: ["CBC", "Inflammatory", "Coagulation"],
            labTests: [],
            imagingRegions: ["Lower_Limbs"]
          }
        };
        
        Object.entries(icuProgressSections).forEach(([sectionName, config]) => {
          noteText += `\n\n${sectionName}:`;
          

          

          
          // Add PE findings with proper French translation
          const sectionPeFindings = config.peFindings.filter(system => 
            peSystems.size > 0 && Array.from(peSystems).includes(system)
          ).map(system => {
            if (language === 'fr') {
              const key = `pe.findings.${system.toLowerCase().replace(/[^a-z]/g, '')}`;
              const frenchFindings = t(key);
              return frenchFindings !== key ? frenchFindings : physicalExamOptions[system as keyof typeof physicalExamOptions];
            } else {
              const findings = physicalExamOptions[system as keyof typeof physicalExamOptions];
              return findings;
            }
          });
          
          // Add intubation parameters for respiratory section
          const intubationFindings: string[] = [];
          if ((sectionName === "RESPIRATORY" || sectionName === "RESPIRATOIRE") && Object.keys(intubationValues).length > 0) {
            const ventParams: string[] = [];
            Object.entries(intubationValues).forEach(([paramKey, paramData]) => {
              if (paramData.current && paramData.current.trim() !== "") {
                const paramInfo = intubationParameters[paramKey as keyof typeof intubationParameters];
                if (paramInfo) {
                  const translatedParamName = getTranslatedIntubationParameterName(paramInfo.name);
                  let ventEntry = `${translatedParamName}: ${paramData.current}`;
                  
                  // Add trending data if available
                  const pastValues = paramData.past.filter(val => val && val.trim() !== "");
                  if (pastValues.length > 0) {
                    ventEntry += ` (${pastValues.join(", ")})`;
                  }
                  
                  ventParams.push(ventEntry);
                }
              }
            });
            
            if (ventParams.length > 0) {
              intubationFindings.push(`Ventilator settings: ${ventParams.join(", ")}`);
            }
          }
          
          // Add relevant lab results with trending
          const sectionLabFindings: string[] = [];
          
          // Handle specific lab tests first
          if (config.labTests) {
            // Group blood gas results for single line display
            const bloodGasResults: string[] = [];
            const otherLabResults: string[] = [];
            
            config.labTests.forEach(testPath => {
              const [categoryName, testKey] = testPath.split(':');
              if (labValues[categoryName] && labValues[categoryName][testKey]) {
                const testData = labValues[categoryName][testKey];
                if (testData.current && testData.current.trim() !== "") {
                  const categoryData = labCategories[categoryName as keyof typeof labCategories];
                  const testInfo = categoryData.tests[testKey as keyof typeof categoryData.tests];
                  
                  if (categoryName === "Blood Gases") {
                    // For blood gases, collect values for single line display
                    if (testKey === "Lactate") {
                      let labEntry = `Lactate ${testData.current}`;
                      const pastValues = testData.past.filter(val => val && val.trim() !== "");
                      if (pastValues.length > 0) {
                        labEntry += ` [${pastValues.join(", ")}]`;
                      }
                      otherLabResults.push(labEntry);
                    } else {
                      // Collect blood gas values for single line
                      let gasValue = `${testInfo?.name || testKey} ${testData.current}`;
                      const pastValues = testData.past.filter(val => val && val.trim() !== "");
                      if (pastValues.length > 0) {
                        gasValue += ` (${pastValues.join(", ")})`;
                      }
                      bloodGasResults.push(gasValue);
                    }
                  } else {
                    let labEntry = testInfo ? `${testInfo.name} ${testData.current}` : testData.current;
                    
                    const pastValues = testData.past.filter(val => val && val.trim() !== "");
                    if (pastValues.length > 0) {
                      labEntry += ` [${pastValues.join(", ")}]`;
                    }
                    
                    otherLabResults.push(labEntry);
                  }
                }
              }
            });
            
            // Add grouped blood gas results as single line
            if (bloodGasResults.length > 0) {
              const gasType = bloodGasTypes["Blood Gases"] ? `${bloodGasTypes["Blood Gases"]} blood gas` : "ABG";
              sectionLabFindings.push(`${gasType}: ${bloodGasResults.join(", ")}`);
            }
            
            // Add other lab results
            sectionLabFindings.push(...otherLabResults);
          }
          
          // Handle general lab categories (excluding specific tests already handled)
          config.labCategories.forEach(labCategory => {
            if (labValues[labCategory]) {
              const categoryData = labCategories[labCategory as keyof typeof labCategories];
              Object.entries(labValues[labCategory]).forEach(([testKey, testData]) => {
                // Skip if this test is already handled by specific test routing
                const isSpecificTest = config.labTests?.some(testPath => testPath === `${labCategory}:${testKey}`);
                if (isSpecificTest) return;
                
                if (testData.current && testData.current.trim() !== "") {
                  // Check if it's a "normal" entry
                  if (testKey.endsWith('_normal')) {
                    sectionLabFindings.push(testData.current);
                  } else {
                    // Get the test name from categoryData
                    const testInfo = categoryData.tests[testKey as keyof typeof categoryData.tests];
                    let labEntry = testInfo ? `${testInfo.name} ${testData.current}` : testData.current;
                    
                    // Add blood gas type if applicable
                    if (labCategory === "Blood Gases" && bloodGasTypes[labCategory]) {
                      labEntry = `${bloodGasTypes[labCategory]} ${labEntry}`;
                    }
                    
                    // Add trending data if available
                    const pastValues = testData.past.filter(val => val && val.trim() !== "");
                    if (pastValues.length > 0) {
                      labEntry += ` [${pastValues.join(", ")}]`;
                    }
                    
                    sectionLabFindings.push(labEntry);
                  }
                }
              });
            }
          });
          
          // Add relevant imaging results
          const sectionImagingFindings: string[] = [];
          if (config.imagingRegions) {
            config.imagingRegions.forEach(regionKey => {
              const selectedModality = selectedImagingModalities[regionKey];
              if (selectedModality) {
                const resultKey = `${selectedModality}_${regionKey}`;
                const currentResult = imagingResults[resultKey];
                const findingKey = resultKey as keyof typeof imagingFindings;
                const findings = imagingFindings[findingKey];
                
                if (currentResult) {
                  // Create a proper imaging study name based on modality and region
                  let studyName = "";
                  const regionName = getTranslatedImagingRegionName(regionKey);
                  
                  if (selectedModality === "X-Ray") {
                    if (regionKey === "Chest" || regionKey === "Thorax") {
                      studyName = language === 'fr' ? 'Radiographie pulmonaire' : 'Chest X-ray';
                    } else if (regionKey === "Abdomen") {
                      studyName = language === 'fr' ? 'Radiographie abdominale' : 'Abdominal X-ray';
                    } else {
                      studyName = language === 'fr' ? `Radiographie ${regionName}` : `${regionName} X-ray`;
                    }
                  } else if (selectedModality === "CT") {
                    if (regionKey === "CNS") {
                      studyName = language === 'fr' ? 'TDM cérébrale' : 'CT head';
                    } else if (regionKey === "Chest" || regionKey === "Thorax") {
                      studyName = language === 'fr' ? 'TDM thoracique' : 'CT chest';
                    } else if (regionKey === "Abdomen") {
                      studyName = language === 'fr' ? 'TDM abdominale' : 'CT abdomen';
                    } else {
                      studyName = language === 'fr' ? `TDM ${regionName}` : `CT ${regionName}`;
                    }
                  } else if (selectedModality === "MRI") {
                    if (regionKey === "CNS") {
                      studyName = language === 'fr' ? 'IRM cérébrale' : 'MRI brain';
                    } else {
                      studyName = language === 'fr' ? `IRM ${regionName}` : `MRI ${regionName}`;
                    }
                  } else {
                    // Fallback for other modalities
                    const modalityName = getTranslatedImagingModality(selectedModality);
                    studyName = `${modalityName} ${regionName}`;
                  }
                  
                  let imagingEntry = `${studyName}: `;
                  
                  if (currentResult.normal && findings) {
                    const mode = currentResult.mode || "concise";
                    // Use French text if language is French and available
                    const textKey = language === 'fr' ? `${mode}_fr` : mode;
                    const findingsText = findings[textKey as keyof typeof findings] || findings[mode];
                    // Extract just the findings text after the colon to avoid redundancy
                    const colonIndex = findingsText.indexOf(': ');
                    const cleanFindings = colonIndex !== -1 ? findingsText.substring(colonIndex + 2) : findingsText;
                    imagingEntry += cleanFindings;
                  } else if (currentResult.customResult && currentResult.customResult.trim() !== "") {
                    imagingEntry += currentResult.customResult;
                  } else {
                    imagingEntry += language === 'fr' ? 'En attente' : 'Pending';
                  }
                  
                  sectionImagingFindings.push(imagingEntry);
                }
              }
            });
          }
          
          const allFindings = [...sectionPeFindings, ...sectionLabFindings, ...intubationFindings, ...sectionImagingFindings];
          
          if (allFindings.length > 0) {
            noteText += `\n${allFindings.join("\n")}`;
          } else {
            noteText += `\n[Enter ${sectionName.toLowerCase()} findings]`;
          }
        });
        
        const clinicalImpressionHeader = language === 'fr' ? 'IMPRESSION CLINIQUE' : 'CLINICAL IMPRESSION';
        const clinicalImpressionText = language === 'fr' ? '[Entrer les impressions cliniques]' : '[Enter clinical impressions]';
        const planHeader = language === 'fr' ? 'PLAN' : 'PLAN';
        const planText = language === 'fr' ? '[Entrer le plan de traitement]' : '[Enter treatment plan]';
        noteText += `\n\n${clinicalImpressionHeader}:\n${clinicalImpressionText}\n\n`;
        noteText += `${planHeader}:\n${planText}`;
      }
    } else if (noteType === "consultation") {
      if (language === 'fr') {
        noteText = `RAISON DE CONSULTATION :\n${generateChiefComplaintText(chiefComplaintData, true)}\n\n`;
        noteText += `${generateAllergiesAndSocialHistory(allergiesData, socialHistoryData, true)}\n\n`;
        noteText += `MÉDICATIONS À DOMICILE:\n${medicationsData.homeMedications.length > 0 ? formatMedicationsForNote(medicationsData.homeMedications, language) : '[Entrer les médications à domicile]'}\n\n`;
        noteText += `MÉDICATIONS À L'HÔPITAL:\n${medicationsData.hospitalMedications.length > 0 ? formatMedicationsForNote(medicationsData.hospitalMedications, language) : '[Entrer les médications hospitalières]'}\n\n`;
        noteText += `HISTOIRE DE LA MALADIE ACTUELLE:\n[Entrer l'histoire de la maladie actuelle]`;
      } else {
        noteText = `REASON FOR CONSULTATION:\n${generateChiefComplaintText(chiefComplaintData, false)}\n\n`;
        noteText += `${generateAllergiesAndSocialHistory(allergiesData, socialHistoryData, false)}\n\n`;
        noteText += `HOME MEDICATIONS:\n${medicationsData.homeMedications.length > 0 ? formatMedicationsForNote(medicationsData.homeMedications, language) : '[Enter home medications]'}\n\n`;
        noteText += `HOSPITAL MEDICATIONS:\n${medicationsData.hospitalMedications.length > 0 ? formatMedicationsForNote(medicationsData.hospitalMedications, language) : '[Enter hospital medications]'}\n\n`;
        noteText += `HISTORY OF PRESENTING ILLNESS:\n[Enter history of presenting illness]`;
      }
      
      if (rosText) {
        noteText += `\n\n${rosText}`;
      }
      
      if (peText) {
        noteText += `\n\n${language === 'fr' ? 'EXAMEN PHYSIQUE:' : 'PHYSICAL EXAMINATION:'}\n${peText}`;
      }
      
      if (labText) {
        noteText += `\n\n${language === 'fr' ? 'INVESTIGATIONS:' : 'INVESTIGATIONS:'}\n${labText}`;
      }
      
      noteText += language === 'fr' ? `\n\nIMPRESSION CLINIQUE:\n[Entrer les impressions cliniques]\n\n` : `\n\nCLINICAL IMPRESSION:\n[Enter clinical impressions]\n\n`;
      noteText += language === 'fr' ? `RECOMMANDATIONS:\n[Entrer les recommandations]` : `RECOMMENDATIONS:\n[Enter recommendations]`;
    }
    
    // Apply complete French translations to the entire note text
    if (language === 'fr') {
      // Fix any remaining English laboratory test names
      noteText = noteText.replace(/White Blood Cells/g, 'Globules blancs');
      noteText = noteText.replace(/Red Blood Cells/g, 'Globules rouges');
      noteText = noteText.replace(/Hemoglobin/g, 'Hémoglobine');
      noteText = noteText.replace(/Hematocrit/g, 'Hématocrite');
      noteText = noteText.replace(/Platelets/g, 'Plaquettes');
      noteText = noteText.replace(/Sodium/g, 'Sodium');
      noteText = noteText.replace(/Potassium/g, 'Potassium');
      noteText = noteText.replace(/Chloride/g, 'Chlorure');
      noteText = noteText.replace(/Bicarbonate/g, 'Bicarbonate');
      noteText = noteText.replace(/Glucose/g, 'Glucose');
      noteText = noteText.replace(/Creatinine/g, 'Créatinine');
      noteText = noteText.replace(/BUN/g, 'Urée');
      noteText = noteText.replace(/Urea/g, 'Urée');
      noteText = noteText.replace(/Alkaline Phosphatase/g, 'Phosphatase alkaline');
      noteText = noteText.replace(/Total Bilirubin/g, 'Bilirubine totale');
      noteText = noteText.replace(/Albumin/g, 'Albumine');
      noteText = noteText.replace(/Prothrombin Time/g, 'PT');
      noteText = noteText.replace(/Partial Thromboplastin Time/g, 'PTT');
      noteText = noteText.replace(/C-Reactive Protein/g, 'CRP');
      noteText = noteText.replace(/ESR/g, 'VS');
      noteText = noteText.replace(/Procalcitonin/g, 'Procalcitonine');
      noteText = noteText.replace(/Base Excess/g, 'Excédent de base');
      noteText = noteText.replace(/Lactate/g, 'Lactate');
      
      // Fix any remaining English section headers
      noteText = noteText.replace(/CLINICAL IMPRESSION:/g, 'IMPRESSION CLINIQUE:');
      noteText = noteText.replace(/PLAN:/g, 'PLAN:');
      noteText = noteText.replace(/ABG:/g, 'GAZ:');
      noteText = noteText.replace(/Ventilator settings:/g, 'Paramètres ventilatoires:');
      
      // Fix any remaining English physical exam findings
      noteText = noteText.replace(/No acute distress/g, 'Aucune détresse aiguë');
      noteText = noteText.replace(/Alert and oriented/g, 'Alerte et orienté');
      noteText = noteText.replace(/Regular rate and rhythm/g, 'Rythme et fréquence réguliers');
      noteText = noteText.replace(/Clear to auscultation bilaterally/g, 'Clair à l\'auscultation bilatérale');
      noteText = noteText.replace(/Soft, non-tender, non-distended/g, 'Souple, non sensible, non distendu');
      noteText = noteText.replace(/No pedal edema/g, 'Aucun œdème des membres inférieurs');
      noteText = noteText.replace(/Warm and well-perfused/g, 'Chaud et bien perfusé');
      noteText = noteText.replace(/No rash or lesions/g, 'Aucune éruption cutanée ou lésion');
      
      // Fix any remaining English placeholder text
      noteText = noteText.replace(/\[Enter neurologique findings\]/g, '[Entrer les constatations neurologiques]');
      noteText = noteText.replace(/\[Enter hémodynamique findings\]/g, '[Entrer les constatations hémodynamiques]');
      noteText = noteText.replace(/\[Enter respiratoire findings\]/g, '[Entrer les constatations respiratoires]');
      noteText = noteText.replace(/\[Enter gastro-intestinal findings\]/g, '[Entrer les constatations gastro-intestinales]');
      noteText = noteText.replace(/\[Enter néphro-métabolique findings\]/g, '[Entrer les constatations néphro-métaboliques]');
      noteText = noteText.replace(/\[Enter hémato-infectieux findings\]/g, '[Entrer les constatations hémato-infectieuses]');
      noteText = noteText.replace(/\[Enter (.+?) findings\]/g, '[Entrer les constatations $1]');
      
      // Fix specific placeholder texts for clinical impression and plan
      noteText = noteText.replace(/\[Enter clinical impressions\]/g, '[Entrer les impressions cliniques]');
      noteText = noteText.replace(/\[Enter treatment plan\]/g, '[Entrer le plan de traitement]');
    }
    
    setNote(noteText);
  };

  const copyNote = async () => {
    try {
      await navigator.clipboard.writeText(note);
      toast({
        title: "Note Copied",
        description: "ROS note copied to clipboard",
      });
    } catch (err) {
      toast({
        title: "Copy Failed",
        description: "Unable to copy note to clipboard",
        variant: "destructive",
      });
    }
  };

  const totalRosSystems = Object.keys(rosOptions).length;
  const totalPeSystems = Object.keys(physicalExamOptions).length;
  const totalSystems = totalRosSystems + totalPeSystems;
  const documentedSystems = selectedRosSystems.size + selectedPeSystems.size;
  const completionPercentage = Math.round((documentedSystems / totalSystems) * 100);

  const renderRosSection = () => (
    <Card id="ros" className="overflow-hidden">
      <div className="bg-gradient-to-r from-blue-600 to-blue-700 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <ClipboardList className="text-white w-5 h-5" />
            <h3 className="text-lg font-semibold text-white">{language === 'fr' ? 'Revue des systèmes' : 'Review of systems'}</h3>
            <span className="text-white/80 text-sm">({selectedRosSystems.size}/{Object.keys(rosOptions).length})</span>
          </div>
          <div className="flex items-center space-x-3">
            <button
              onClick={(e) => {
                e.stopPropagation();
                selectAllRosSystems();
              }}
              className="bg-white/20 hover:bg-white/30 text-white px-3 py-1 rounded text-sm transition-colors"
            >
              {language === 'fr' ? t('button.selectAll') : 'Select All'}
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation();
                setSelectedRosSystems(new Set());
                setRosSystemModes({});
                updateNote(new Set(), selectedPeSystems, {}, medications, allergies, socialHistory, chiefComplaint);
              }}
              className="bg-white/20 hover:bg-white/30 text-white px-3 py-1 rounded text-sm transition-colors"
            >
              {language === 'fr' ? t('button.clear') : 'Clear'}
            </button>

          </div>
        </div>
      </div>
        <CardContent className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {Object.entries(rosOptions).map(([system, findings]) => {
              const IconComponent = systemIcons[system as keyof typeof systemIcons];
              const colorClass = systemColors[system as keyof typeof systemColors];
              const isSelected = selectedRosSystems.has(system);
              const selectedMode = rosSystemModes[system];
              
              return (
                <div key={system} className="group relative">
                  <Card 
                    className={`transition-all duration-200 hover:shadow-lg ${
                      isSelected ? 'ring-2 ring-blue-500 bg-blue-50' : 'hover:bg-gray-50'
                    }`}
                  >
                    <CardContent className="p-4 relative overflow-hidden">
                      {/* Normal view */}
                      <div className="group-hover:opacity-0 transition-opacity duration-200">
                        <div className="flex items-start space-x-3">
                          <div className={`${colorClass} p-2 rounded-lg flex-shrink-0`}>
                            <IconComponent className="text-white w-4 h-4" />
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center justify-between mb-1">
                              <h4 className="font-semibold text-gray-900 text-sm">{getTranslatedSystemName(system, 'ros')}</h4>
                              {isSelected && (
                                <div className="flex items-center space-x-1">
                                  <span className="text-xs text-gray-500 capitalize">{selectedMode}</span>
                                  <CheckCircle className="text-green-500 w-4 h-4" />
                                </div>
                              )}
                            </div>
                            <p className="text-xs text-gray-600 leading-relaxed">
                              {isSelected ? findings[selectedMode] : (language === 'fr' ? "Survoler pour sélectionner détaillé ou concis" : "Hover to select detailed or concise")}
                            </p>
                          </div>
                        </div>
                      </div>
                      
                      {/* Hover split view */}
                      <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 bg-white">
                        <div className="h-full flex">
                          {/* Detailed half */}
                          <div 
                            className={`w-1/2 p-3 cursor-pointer transition-colors duration-200 hover:bg-blue-50 border-r border-gray-200 ${
                              selectedMode === "detailed" ? "bg-blue-100" : ""
                            }`}
                            onClick={() => toggleRosSystem(system, "detailed")}
                          >
                            <div className="flex items-start space-x-2">
                              <div className={`${colorClass} p-1.5 rounded flex-shrink-0`}>
                                <IconComponent className="text-white w-3 h-3" />
                              </div>
                              <div className="flex-1">
                                <div className="flex items-center justify-between mb-1">
                                  <h5 className="font-medium text-gray-900 text-xs">{language === 'fr' ? t('ros.mode.detailed') : 'Detailed'}</h5>
                                  {selectedMode === "detailed" && (
                                    <CheckCircle className="text-green-500 w-3 h-3" />
                                  )}
                                </div>
                                <p className="text-xs text-gray-600 leading-tight">
                                  {language === 'fr' ? 
                                    t(`ros.findings.${system.toLowerCase().replace(/[^a-z]/g, '')}.detailed`) || findings.detailed 
                                    : findings.detailed}
                                </p>
                              </div>
                            </div>
                          </div>
                          
                          {/* Concise half */}
                          <div 
                            className={`w-1/2 p-3 cursor-pointer transition-colors duration-200 hover:bg-purple-50 ${
                              selectedMode === "concise" ? "bg-purple-100" : ""
                            }`}
                            onClick={() => toggleRosSystem(system, "concise")}
                          >
                            <div className="flex items-start space-x-2">
                              <div className={`${colorClass} p-1.5 rounded flex-shrink-0`}>
                                <IconComponent className="text-white w-3 h-3" />
                              </div>
                              <div className="flex-1">
                                <div className="flex items-center justify-between mb-1">
                                  <h5 className="font-medium text-gray-900 text-xs">{language === 'fr' ? t('ros.mode.concise') : 'Concise'}</h5>
                                  {selectedMode === "concise" && (
                                    <CheckCircle className="text-green-500 w-3 h-3" />
                                  )}
                                </div>
                                <p className="text-xs text-gray-600 leading-tight">
                                  {language === 'fr' ? 
                                    t(`ros.findings.${system.toLowerCase().replace(/[^a-z]/g, '')}.concise`) || findings.concise 
                                    : findings.concise}
                                </p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              );
            })}
          </div>
        </CardContent>

    </Card>
  );



  const renderPeSection = () => (
    <Card id="pe" className="overflow-hidden">
      <div className="bg-gradient-to-r from-green-600 to-green-700 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Search className="text-white w-5 h-5" />
            <h3 className="text-lg font-semibold text-white">{language === 'fr' ? 'Examen physique' : 'Physical Exam'}</h3>
            <span className="text-white/80 text-sm">({selectedPeSystems.size}/{Object.keys(physicalExamOptions).length})</span>
          </div>
          <div className="flex items-center space-x-3">
            <button
              onClick={(e) => {
                e.stopPropagation();
                selectAllPeSystems();
              }}
              className="bg-white/20 hover:bg-white/30 text-white px-3 py-1 rounded text-sm transition-colors"
            >
              {language === 'fr' ? t('button.selectAll') : 'Select All'}
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation();
                setSelectedPeSystems(new Set());
                updateNote(selectedRosSystems, new Set(), rosSystemModes, medications, allergies, socialHistory, chiefComplaint);
              }}
              className="bg-white/20 hover:bg-white/30 text-white px-3 py-1 rounded text-sm transition-colors"
            >
              {language === 'fr' ? t('button.clear') : 'Clear'}
            </button>
            
              <ChevronUp className="text-white w-5 h-5" />
            ) : (
              <ChevronDown className="text-white w-5 h-5" />

          </div>
        </div>
      </div>
      
        <CardContent className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {Object.entries(physicalExamOptions).map(([system, findings]) => {
              const IconComponent = systemIcons[system as keyof typeof systemIcons];
              const colorClass = systemColors[system as keyof typeof systemColors];
              const isSelected = selectedPeSystems.has(system);
              
              return (
                <Card 
                  key={system} 
                  className={`cursor-pointer transition-all duration-200 hover:shadow-lg ${
                    isSelected ? 'ring-2 ring-green-500 bg-green-50' : 'hover:bg-gray-50'
                  }`}
                  onClick={() => togglePeSystem(system)}
                >
                  <CardContent className="p-4">
                    <div className="flex items-start space-x-3">
                      <div className={`${colorClass} p-2 rounded-lg flex-shrink-0`}>
                        <IconComponent className="text-white w-4 h-4" />
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center justify-between mb-1">
                          <h4 className="font-semibold text-gray-900 text-sm">{getTranslatedSystemName(system, 'pe')}</h4>
                          {isSelected && (
                            <CheckCircle className="text-green-500 w-4 h-4" />
                          )}
                        </div>
                        <p className="text-xs text-gray-600 leading-relaxed">
                          {language === 'fr' ? 
                            t(`pe.findings.${system.toLowerCase().replace(/[^a-z]/g, '')}`) || findings 
                            : findings}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </CardContent>
    </Card>
  );



  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                <Stethoscope className="text-white w-4 h-4" />
              </div>
              <div>
                <h1 className="text-xl font-semibold text-gray-900">Arinote</h1>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <Languages className="w-4 h-4 text-gray-500" />
              <div className="flex border rounded-lg">
                <button
                  className={`px-3 py-1 text-sm font-medium rounded-l-lg transition-colors ${
                    language === 'en' 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                  onClick={() => setLanguage('en')}
                >
                  EN
                </button>
                <button
                  className={`px-3 py-1 text-sm font-medium rounded-r-lg transition-colors ${
                    language === 'fr' 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                  onClick={() => setLanguage('fr')}
                >
                  FR
                </button>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-full mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex h-[calc(100vh-12rem)] gap-6">
          
          {/* Left Section Display */}
          <div className="w-1/2 flex flex-col">
            <Card className="flex-1 flex flex-col">
              <CardContent className="p-4 flex-1 flex flex-col">
                {/* Section Navigation Header */}
                <div className="flex items-center justify-between bg-white border rounded-lg p-4 mb-4">
                  {/* Section Navigation Boxes */}
                  <div className="flex flex-wrap gap-2">
                    {sections.map((section, index) => (
                      <button
                        key={section.id}
                        onClick={() => setCurrentSection(index)}
                        className={`px-2 py-1 rounded text-xs font-medium transition-colors ${
                          currentSection === index
                            ? 'bg-blue-500 text-white'
                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200 border border-gray-300'
                        }`}
                      >
                        {section.name}
                      </button>
                    ))}
                  </div>
                  <div className="flex items-center space-x-4">
                    <span className="text-sm text-gray-500">
                      {currentSection + 1} of {sections.length}
                    </span>
                  </div>
                </div>

                {/* Navigation Arrows */}
                <div className="flex items-center space-x-2 mb-4">
                  <button
                    onClick={prevSection}
                    disabled={currentSection === 0}
                    className="p-2 rounded-lg border border-gray-300 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    <ChevronLeft className="w-5 h-5" />
                  </button>
                  <button
                    onClick={nextSection}
                    disabled={currentSection === sections.length - 1}
                    className="p-2 rounded-lg border border-gray-300 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    <ChevronRight className="w-5 h-5" />
                  </button>
                </div>

                {/* Current Section Content */}
                <div className="flex-1 overflow-y-auto">
                  {renderCurrentSection()}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Right Panel - Live Preview */}
          <div className="w-1/2 flex flex-col">
            <Card className="flex-1 flex flex-col overflow-hidden">
              <div className="bg-gradient-to-r from-blue-600 to-blue-700 px-6 py-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <FileText className="text-white w-5 h-5" />
                    <h3 className="text-lg font-semibold text-white">{language === 'fr' ? 'Aperçu en temps réel' : 'Live Preview'}</h3>
                    <span className="text-white/80 text-sm">({documentedSystems}/{totalSystems})</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Button variant="ghost" size="icon" onClick={copyNote} className="text-white/80 hover:text-white h-8 w-8">
                      <Copy className="w-4 h-4" />
                    </Button>
                    <Button variant="ghost" size="icon" onClick={resetForm} className="text-white/80 hover:text-white h-8 w-8">
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
                <p className="text-sm text-white/70 mt-1">{language === 'fr' ? 'La note se met à jour automatiquement' : 'Note updates automatically as you make selections'}</p>
              </div>
              <CardContent className="p-6 flex-1 overflow-hidden">
                <div
                  className="w-full h-full text-sm leading-relaxed border-0 focus:ring-0 bg-gray-50 dark:bg-gray-900"
                  style={{ whiteSpace: 'pre-line', fontFamily: 'monospace', minHeight: '400px' }}
                >
                  {note}
                </div>
              </CardContent>
              <div className="bg-gray-50 px-6 py-3 border-t border-gray-200">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-500">Characters: {note.length}</span>
                  <span className="text-gray-500">Systems: {documentedSystems}/{totalSystems}</span>
                </div>
              </div>
            </Card>
          </div>
        </div>
      </main>
    </div>
  );
}

export default ReviewOfSystems;
